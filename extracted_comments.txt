───── C:\Users\tarik\Desktop\Image_analysis\src\__init__.py ─────
Main source package for the Image Analysis application.

This is the root package that organizes the entire SEM/GDS alignment application into three main modules:
- core: Data models, utilities, and core business logic
- services: Business logic services that coordinate between UI and core
- ui: User interface components and controllers

The package follows a layered architecture:
UI Layer -> Services Layer -> Core Layer

Dependencies:
- Used by: main.py (application entry point)
- Uses: core, services, ui subpackages

───── C:\Users\tarik\Desktop\Image_analysis\src\core\gds_aligned_generator.py ─────
GDS Aligned Generator - Core GDS Transformation Engine

This module is the core transformation engine that generates aligned GDS images by applying
transformation parameters (rotation, zoom, movement) to GDS structures. It provides the
low-level functionality for the alignment system.

Key Functions:
- generate_aligned_gds(): Main function that applies transformations to GDS structures
- generate_transformed_gds_image(): Core transformation logic with coherent parameter application
- generate_base_gds_image(): Legacy compatibility function for basic transformations
- apply_zoom_transform(): Applies zoom transformations around image center
- apply_move_transform(): Applies translation transformations
- rotate_polygon(): Rotates individual polygons around specified center points

Transformation Order (Critical):
1. Movement (translation)
2. Rotation (90-degree increments)
3. Zoom (scaling)

Dependencies:
- Uses: gdspy (GDS file reading), numpy, cv2 (image processing)
- Uses: gds_display_generator (structure info and bounds)
- Called by: services/transformation_service.py
- Called by: services/manual_alignment_service.py
- Called by: services/auto_alignment_service.py
- Called by: ui/alignment_controller.py (indirectly)

Data Flow:
1. Receives structure number and transformation parameters
2. Loads GDS file and extracts polygons for specified structure
3. Applies transformations in correct order to polygon coordinates
4. Renders transformed polygons to bitmap image
5. Returns aligned image for display/analysis

Critical Notes:
- Maintains exact UI behavior compatibility
- Handles rotation expansion for proper bounds calculation
- Uses coherent transformation application (not incremental)
- Supports both legacy and modern parameter formats

───── C:\Users\tarik\Desktop\Image_analysis\src\core\gds_display_generator.py ─────
GDS Display Generator - Core GDS Visualization Engine

This module provides the fundamental GDS visualization capabilities for the application.
It handles loading GDS files, extracting specific structures, and generating display images
that can be overlaid on SEM images for alignment purposes.

Key Functions:
- generate_display_gds(): Main function to generate structure display images
- get_structure_info(): Retrieves metadata for predefined structures
- get_gds_path(): Returns the default GDS file path
- list_available_structures(): Lists all available structure IDs
- generate_display_gds_with_bounds(): Generates displays with custom bounds
- get_all_structures_info(): Returns complete structure metadata

Predefined Structures (Hard-coded):
1. Circpol_T2 - Layer 14
2. IP935Left_11 - Layers 1,2
3. IP935Left_14 - Layer 1
4. QC855GC_CROSS_Bottom - Layers 1,2
5. QC935_46 - Layer 1

Dependencies:
- Uses: gdspy (GDS file reading), numpy, cv2 (image processing)
- Called by: gds_aligned_generator.py (for structure info)
- Called by: services/new_gds_service.py
- Called by: services/gds_image_service.py
- Called by: ui/gds_manager.py (indirectly)

Data Flow:
1. Loads GDS file using gdspy
2. Extracts polygons for specified layers within structure bounds
3. Transforms polygon coordinates to image pixel coordinates
4. Renders polygons to binary image using cv2.fillPoly
5. Returns image for display or further processing

Critical Notes:
- Uses hard-coded structure definitions for consistency
- Applies Y-axis flipping for proper image coordinate system
- Generates binary images (0=structure, 255=background)
- Maintains aspect ratio and centering for proper alignment

───── C:\Users\tarik\Desktop\Image_analysis\src\core\simple_gds_loader.py ─────
Simple GDS Loader - Streamlined GDS File Processing

This module provides a simplified, object-oriented interface for loading and processing
GDS files. It focuses on ease of use and reliability, providing a clean API for
structure extraction and image generation.

Key Features:
- Object-oriented GDS file handling
- Predefined structure definitions for consistency
- Automatic image generation with proper scaling
- Error handling and fallback mechanisms
- Support for both grayscale and colored output

Main Class:
- SimpleGDSLoader: Main class for GDS file operations

Key Methods:
- generate_structure_image(): Creates images for specific structures
- generate_full_cell_image(): Creates images of entire GDS cells
- get_structure_info(): Retrieves structure metadata
- list_structures(): Lists available structures

Predefined Structures:
Same as gds_display_generator.py for consistency:
1. Circpol_T2, 2. IP935Left_11, 3. IP935Left_14, 4. QC855GC_CROSS_Bottom, 5. QC935_46

Dependencies:
- Uses: gdspy (GDS reading), numpy, cv2 (image processing)
- Called by: services/file_service.py
- Called by: ui/file_operations.py
- Called by: ui/gds_manager.py

Data Flow:
1. Loads GDS file and validates structure
2. Extracts polygons using gdspy API
3. Filters polygons by layer and bounds
4. Transforms coordinates to image space
5. Renders to binary or colored images
6. Returns processed images for display

Advantages over direct gdspy usage:
- Simplified API with error handling
- Consistent structure definitions
- Automatic scaling and centering
- Support for different output formats

───── C:\Users\tarik\Desktop\Image_analysis\src\core\__init__.py ─────
Core package for SEM/GDS alignment tool.

This package contains the fundamental data models and utilities that form the foundation
of the SEM/GDS alignment application. It provides low-level functionality that is used
throughout the application.

Architecture:
- models: Data structures for SEM images, GDS models, and alignment results
- utils: Common utilities for file operations, logging, configuration management
- gds_*: GDS file processing and image generation modules
- simple_*: Simplified implementations for core functionality

Key Components:
- SemImage: Handles SEM image data and operations
- GDS models: Handle GDS file loading and structure extraction
- Display generators: Create visual representations of GDS structures
- Alignment generators: Apply transformations to GDS data
- Simple loaders: Streamlined GDS loading functionality

Dependencies:
- Used by: services package, ui package
- Uses: External libraries (gdspy/gdstk, numpy, opencv, PIL)
- Called by: All service classes and UI controllers

Data Flow:
1. Raw files (SEM images, GDS files) -> Core models
2. Core models -> Services for processing
3. Processed data -> UI for display

───── C:\Users\tarik\Desktop\Image_analysis\src\core\models\gds_model.py ─────
GDS Model - Core GDS File Data Management

This module provides a simplified, object-oriented interface for loading and managing
GDS (GDSII) file data. It focuses on data extraction and polygon management without
complex image generation, which is handled by separate service classes.

Main Class:
- GDSModel: Core class for GDS file operations and data management

Key Methods:
- load_gds_data(): Loads GDS file and extracts basic structure information
- get_polygons(): Retrieves polygon data filtered by layers
- get_layers(): Lists available layer numbers in the GDS file
- get_polygons_in_region(): Extracts polygons within specified coordinate bounds
- get_layer_info(): Provides statistics and metadata for each layer
- get_gds_info(): Returns comprehensive GDS file information

Dependencies:
- Uses: gdstk (modern GDS library), numpy (array operations), pathlib (file handling)
- Called by: services/gds_image_service.py (for image generation)
- Called by: services/file_service.py (for file operations)
- Called by: ui/gds_manager.py (for UI data management)

Data Flow:
1. Loads GDS file using gdstk library
2. Identifies main cell (prefers 'nazca' cell or first top-level cell)
3. Extracts polygon data organized by layers
4. Provides filtered access to polygons by layer and region
5. Calculates bounds, areas, and other geometric properties
6. Serves as data source for image generation services

Features:
- Automatic cell detection and selection
- Layer-based polygon filtering
- Region-based polygon extraction
- Comprehensive metadata extraction
- Error handling with custom GDSError exception
- Legacy compatibility functions for older code

Note:
- Complex image generation moved to GDSImageService for separation of concerns
- Uses gdstk (modern) instead of gdspy (legacy) for better performance
- Provides foundation for alignment and visualization operations

───── C:\Users\tarik\Desktop\Image_analysis\src\core\models\sem_image_basic.py ─────
Basic SEM Image class for the SEM/GDS Alignment Tool.

Simple class to store SEM image data with numpy array storage and basic metadata.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\models\simple_aligned_gds_model.py ─────
Aligned GDS model that wraps InitialGdsModel with transformation management.

This module provides the AlignedGdsModel class for:
- Wrapping InitialGdsModel with transformation parameters for a viewing frame.
- Managing frame scale, translation, and 90° rotation.
- Deferring arbitrary rotations to rendering time.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\models\simple_gds_extraction.py ─────
GDS extraction utilities for structure analysis and frame extraction.

This module provides utilities for:
- Structure information extraction (steps 46-50)
- Structure bounds calculation
- Layer enumeration
- Structure validation
- Cropping logic for frame extraction

───── C:\Users\tarik\Desktop\Image_analysis\src\core\models\simple_initial_gds_model.py ─────
Initial GDS model for loading and processing GDS files using gdstk.

This module provides the InitialGdsModel class for:
- Loading GDS files with proper error handling
- Extracting basic information (layers, cells, bounds)
- Basic polygon data extraction

───── C:\Users\tarik\Desktop\Image_analysis\src\core\models\simple_models.py ─────
Core data models for the SEM/GDS Alignment Tool.

Basic model classes for handling SEM images and GDS data.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\models\simple_sem_image.py ─────
SEM Image model for handling SEM image data and operations.

Basic SEM image class with numpy array storage and metadata.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\models\structure_definitions.py ─────
Structure Definition Management Module
Simple structure definition system for managing predefined GDS structures
with coordinate bounds and layer information.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\models\__init__.py ─────
Core data models for the SEM/GDS image analysis application.

Basic data structures for representing:
- SEM (Scanning Electron Microscope) images with metadata
- GDS (GDSII) layout files with gdstk integration
- Basic structure definitions

Classes:
    SemImage: Basic SEM image class with numpy array storage
    InitialGdsModel: Basic GDS file loader using gdstk

───── C:\Users\tarik\Desktop\Image_analysis\src\core\pipeline\automatic_pipeline_separate.py ─────
Step 16: Completely separate Automatic Processing Pipeline.
No shared state with manual pipeline.
Each pipeline has its own progress tracking.
User explicitly chooses which pipeline to use.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\pipeline\manual_pipeline_separate.py ─────
Step 16: Completely separate Manual Processing Pipeline.
No shared state with automatic pipeline.
Each pipeline has its own progress tracking.
User explicitly chooses which pipeline to use.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\pipeline\pipeline_automatic.py ─────
Automatic Processing Pipeline - Automated Image Processing Workflow

This module implements the automatic processing pipeline that handles automated
filter application, alignment, and scoring with minimal user intervention.
It extends the base pipeline with automatic decision-making and fallback mechanisms.

Main Class:
- AutomaticProcessingPipeline: Automated workflow execution with progress tracking

Key Methods:
- _execute_automatic_mode(): Main entry point for automatic processing
- _apply_automatic_filters_with_progress(): Applies filter sequence automatically
- _perform_automatic_alignment_with_progress(): Performs alignment with fallback
- _get_default_filter_params(): Provides default parameters for filters
- _should_early_exit(): Determines if processing should stop early

Dependencies:
- Inherits from: pipeline_base.ProcessingPipelineBase (shared functionality)
- Uses: numpy (array operations)
- Called by: ui/workflow_controller.py (automatic mode selection)
- Called by: services/workflow_service.py (pipeline orchestration)

Data Flow:
1. Receives input image and configuration parameters
2. Applies automatic filter sequence with progress tracking
3. Performs alignment using primary method with fallback options
4. Evaluates results and triggers early exit if quality is insufficient
5. Emits detailed progress signals for UI updates
6. Returns processed results with confidence metrics

Features:
- Automatic filter parameter selection
- Multi-method alignment with fallback mechanisms
- Early exit logic based on quality thresholds
- Detailed progress reporting and logging
- Error handling with graceful degradation
- Confidence-based decision making

Automatic Workflow:
1. Filter Sequence: Applies predefined filters (CLAHE, Total Variation, etc.)
2. Alignment: Uses ORB+RANSAC with template matching fallback
3. Quality Check: Evaluates confidence scores at each step
4. Early Exit: Stops processing if quality thresholds not met
5. Result Aggregation: Combines results from all successful steps

───── C:\Users\tarik\Desktop\Image_analysis\src\core\pipeline\pipeline_base.py ─────
Processing Pipeline Base - Foundation for Image Processing Workflows

This module provides the base class for all processing pipelines in the application.
It implements shared functionality including state management, signal handling,
result aggregation, and configuration management that is inherited by specific
pipeline implementations (manual, automatic, hybrid).

Main Class:
- ProcessingPipelineBase: Abstract base class for all processing pipelines

Key Methods:
- initialize(): Sets up pipeline with input images and processing mode
- run(): Executes the complete pipeline workflow
- load_config()/save_config(): Configuration file management
- export_results(): Exports all pipeline results to files
- save_pipeline_state()/load_pipeline_state(): Session persistence
- validate_pipeline(): Validates pipeline state and results

Core Functionality:
- Stage Management: Handles filtering, alignment, and scoring stages
- Signal System: Emits detailed progress and status signals for UI updates
- Result Aggregation: Collects and organizes results from all processing stages
- Error Handling: Comprehensive error reporting and recovery mechanisms
- Configuration Management: Loads, validates, and saves processing parameters
- State Persistence: Saves and restores complete pipeline state

Dependencies:
- Uses: PySide6.QtCore (signal system), pipeline_results, pipeline_utils
- Uses: ImageProcessingService, AlignmentService, ScoringService
- Inherited by: pipeline_automatic.py, pipeline_manual.py, pipeline_hybrid.py
- Called by: ui/workflow_controller.py (pipeline orchestration)

Signal System:
- Progress Signals: stage_started, stage_progress, stage_completed
- Status Signals: pipeline_started, pipeline_completed, pipeline_error
- Detailed Signals: filter_trial_*, alignment_method_*, scoring_method_*
- Real-time Signals: status_message, processing_statistics

Data Flow:
1. Initialize with SEM and GDS images plus processing mode
2. Load configuration parameters for processing stages
3. Execute stages sequentially: filtering → alignment → scoring
4. Collect intermediate results and emit progress signals
5. Aggregate final results with metadata and statistics
6. Export results to various formats (JSON, images, matrices)
7. Optionally save complete pipeline state for session persistence

Features:
- Mode-agnostic base functionality
- Comprehensive logging and debugging support
- Flexible configuration system with validation
- Multiple export formats for results
- Session persistence for workflow continuity
- Detailed progress tracking and error reporting
- Service integration with automatic signal connection

───── C:\Users\tarik\Desktop\Image_analysis\src\core\pipeline\pipeline_hybrid.py ─────
Hybrid Processing Pipeline - Combined Manual/Automatic Workflow

This module implements a hybrid processing pipeline that combines elements of both
manual and automatic processing modes. It allows users to have automated processing
with manual intervention points and parameter adjustment capabilities.

Main Class:
- HybridProcessingPipeline: Combined workflow with manual override capabilities

Key Features (To Be Implemented):
- Automatic processing with manual checkpoints
- User intervention at critical decision points
- Parameter adjustment during automated workflow
- Fallback to manual mode when automatic processing fails
- Preview and confirmation steps for automatic results

Dependencies:
- Inherits from: pipeline_base.ProcessingPipelineBase (shared functionality)
- Called by: ui/workflow_controller.py (hybrid mode selection)
- Called by: services/workflow_service.py (pipeline orchestration)

Planned Workflow:
1. Start with automatic parameter detection
2. Present preview and allow manual adjustment
3. Execute automatic processing with user checkpoints
4. Allow manual intervention at any stage
5. Combine automatic efficiency with manual precision

Note: This is a stub implementation for future development phases.
The hybrid mode will be implemented based on user feedback and requirements.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\pipeline\pipeline_manual.py ─────
Manual Processing Pipeline - User-Controlled Image Processing Workflow

This module implements the manual processing pipeline that provides complete user
control over all processing parameters. It collects parameters from UI panels,
allows step-by-step processing, and provides manual adjustment capabilities.

Main Class:
- ManualProcessingPipeline: User-controlled workflow with UI parameter collection

Key Methods:
- _execute_manual_mode(): Main entry point for manual processing
- _collect_ui_parameters(): Gathers parameters from UI panels
- _get_ui_filter_parameters(): Collects filter settings from UI
- _get_ui_alignment_parameters(): Collects alignment settings from UI
- _get_ui_scoring_parameters(): Collects scoring settings from UI
- _perform_manual_alignment(): Applies manual transformation parameters
- validate_manual_mode_readiness(): Checks if UI panels are ready
- set_ui_panels(): Registers UI panel references for parameter collection

Dependencies:
- Inherits from: pipeline_base.ProcessingPipelineBase (shared functionality)
- Uses: numpy (transformation matrices), typing (type hints)
- Called by: ui/workflow_controller.py (manual mode selection)
- Integrates with: UI panels for parameter collection

Data Flow:
1. Collects parameters from connected UI panels
2. Applies user-specified filters with custom parameters
3. Performs manual alignment using user-provided transformation values
4. Calculates scores using user-selected methods and parameters
5. Provides fallback parameters if UI collection fails
6. Validates UI panel connectivity and parameter availability

Features:
- Complete user control over all processing parameters
- Real-time parameter collection from UI panels
- Manual transformation matrix creation from user inputs
- Fallback parameter system for robustness
- UI panel validation and connectivity checking
- Step-by-step processing with user confirmation
- Detailed logging of all user actions and parameters

Manual Workflow:
1. Filter Selection: User chooses filters and adjusts parameters via UI
2. Manual Alignment: User sets translation, rotation, and scale values
3. Scoring Configuration: User selects scoring methods and thresholds
4. Step Execution: Each step waits for user confirmation before proceeding
5. Parameter Validation: Ensures all required parameters are available
6. Result Review: User can review and adjust results at each stage

───── C:\Users\tarik\Desktop\Image_analysis\src\core\pipeline\pipeline_results.py ─────
Pipeline Result Structure for SEM/GDS Comparison Tool

This module defines the unified result structure that aggregates all pipeline outputs
for both in-app display and export functionality.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\pipeline\pipeline_selector.py ─────
Step 16: Pipeline Selector - User explicitly chooses which pipeline to use.
No automatic switching between pipeline types.
Each pipeline has its own progress tracking.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\pipeline\pipeline_utils.py ─────
Pipeline Utilities - Helper Functions for Processing Pipelines

This module provides utility functions used across all processing pipelines
including configuration management, transformation matrix creation, and
validation functions that support the pipeline infrastructure.

Key Functions:
- create_transform_matrix(): Creates 3x3 transformation matrices from parameters
- load_config_from_file(): Loads pipeline configuration from JSON/YAML files
- save_config_to_file(): Saves pipeline configuration to JSON/YAML files
- validate_config(): Validates configuration dictionaries for required keys
- get_default_config(): Returns default pipeline configuration
- get_mode_configs(): Returns mode-specific configurations (manual/automatic)

Dependencies:
- Uses: numpy (matrix operations), json (config files), os (file operations)
- Optional: yaml (YAML config support)
- Used by: All pipeline classes for configuration and transformation support
- Used by: UI components for parameter validation

Configuration Management:
- Supports both JSON and YAML configuration formats
- Provides default configurations for different processing modes
- Validates configuration completeness and structure
- Handles file I/O with proper error handling

Transformation Support:
- Creates transformation matrices from user parameters
- Supports translation, rotation, and scaling transformations
- Uses standard 3x3 homogeneous coordinate matrices
- Compatible with OpenCV and other computer vision libraries

Features:
- Mode-specific configuration templates
- Flexible file format support (JSON/YAML)
- Configuration validation with missing key detection
- Transformation matrix generation from intuitive parameters
- Error handling for file operations and missing dependencies

───── C:\Users\tarik\Desktop\Image_analysis\src\core\pipeline\processing_pipeline.py ─────
Processing Pipeline - Deprecated Legacy Pipeline Module

This module has been deprecated and replaced by modular pipeline classes.
It previously contained a monolithic pipeline implementation that handled
both manual and automatic processing modes in a single class.

Replacement Modules:
- pipeline_manual.py: ManualProcessingPipeline for user-controlled workflows
- pipeline_automatic.py: AutomaticProcessingPipeline for automated workflows  
- pipeline_hybrid.py: HybridProcessingPipeline for combined workflows
- pipeline_base.py: ProcessingPipelineBase with shared functionality
- pipeline_selector.py: PipelineSelector for choosing between pipelines

Migration Guide:
- Replace ProcessingPipeline with ManualProcessingPipeline for manual mode
- Replace ProcessingPipeline with AutomaticProcessingPipeline for automatic mode
- Use PipelineSelector to manage pipeline selection and switching
- Update imports to use specific pipeline classes instead of this module

Deprecation Reason:
- Improved separation of concerns between manual and automatic modes
- Better maintainability with modular architecture
- Cleaner signal handling and state management
- Enhanced extensibility for future pipeline types

Note: This file is kept for backward compatibility but should not be used
for new development. All functionality has been moved to the modular classes.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\pipeline\__init__.py ─────
Processing pipeline orchestration for SEM/GDS alignment workflows.

This module provides the high-level pipeline orchestration that coordinates
the three main processing stages: filtering, alignment, and scoring.

The pipeline supports both manual and automatic processing modes,
maintains stage state and parameters, and provides progress tracking
for long-running operations.

Classes:
    ManualProcessingPipeline: Manual pipeline for UI-driven workflows
    AutomaticProcessingPipeline: Automatic pipeline for batch processing

───── C:\Users\tarik\Desktop\Image_analysis\src\core\utils\config_init.py ─────
Configuration initialization module for SEM/GDS Alignment Tool.

This module provides functions to initialize and validate the configuration
system during application startup.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\utils\config_manager.py ─────
Configuration Manager - Application Configuration and Settings Management

This script provides comprehensive configuration management for the SEM/GDS alignment tool.
It handles JSON-based configuration files, user overrides, session state management, and
environment variable integration for flexible deployment and customization.

Main Classes:
- Config: Simple configuration manager for basic JSON operations

Key Methods:
- load(): Loads configuration from JSON file with fallback to defaults
- save(): Saves current configuration to JSON file
- get(): Gets configuration value using dot notation (e.g., 'ui.window.width')
- set(): Sets configuration value using dot notation
- _get_defaults(): Returns default configuration values

Global Functions:
- load_config(): Loads configuration using global instance
- get_config(): Gets configuration value using global instance
- set_config(): Sets configuration value using global instance
- save_config(): Saves configuration using global instance

Dependencies:
- json: Configuration file parsing and serialization
- os: Environment variable access and file system operations
- pathlib.Path: Cross-platform path handling
- typing: Type hints for Dict, Any, Optional

Features:
- JSON-based configuration with hierarchical structure
- Dot notation for nested configuration access (e.g., 'window.width')
- Default configuration values with automatic fallback
- Graceful error handling with fallback to defaults
- Global configuration instance for application-wide access
- Directory creation for configuration files
- Simple and lightweight configuration management

───── C:\Users\tarik\Desktop\Image_analysis\src\core\utils\error_handling.py ─────
Error Handling Utilities - Comprehensive Error Management and Recovery

This script provides error handling utilities for the SEM/GDS alignment tool.
It includes decorators, safe operation wrappers, validation functions, and
error display mechanisms for robust application operation.

Key Functions:
- safe_file_operation(): Safely executes file operations with error handling
- handle_errors(): Decorator for basic error handling on any function
- log_and_continue(): Decorator to log errors and continue execution
- show_error_message(): Displays error messages to user
- validate_file_exists(): Checks if file exists with error reporting
- validate_directory_exists(): Checks if directory exists with error reporting
- safe_json_load(): Safely loads JSON files with error handling
- safe_json_save(): Safely saves JSON files with error handling

Dependencies:
- logging: Error logging and debugging
- typing: Type hints for Any, Callable, Optional
- functools.wraps: Decorator preservation
- pathlib.Path: File system operations
- json: JSON file operations

Features:
- Function decorators for automatic error handling
- Safe file operation wrappers with specific exception handling
- File and directory validation with user feedback
- JSON file operations with error recovery
- Consistent error message display interface
- Logging integration for debugging and monitoring
- Graceful error recovery without application crashes

───── C:\Users\tarik\Desktop\Image_analysis\src\core\utils\file_utils.py ─────
File Utilities - Path Resolution and Directory Management

This module provides utility functions for file and directory operations
used throughout the SEM/GDS alignment tool. It handles path resolution,
directory creation, and file management operations with consistent
project structure support.

Main Functions:
- ensure_directory(): Creates directories if they don't exist
- get_project_root(): Returns the project root directory path
- get_data_path(): Returns path to Data directory with optional subpath
- get_results_path(): Returns path to Results directory with optional subpath
- get_extracted_structures_path(): Returns path to Extracted_Structures directory
- setup_results_directories(): Creates standard results directory structure
- get_unique_filename(): Generates unique filenames by appending numbers
- list_files_by_extension(): Lists files with specific extensions in directories

Dependencies:
- Uses: os (operating system interface), pathlib.Path (path operations)
- Uses: typing (type hints for Union, Optional)
- Used by: services/file_service.py (file operations)
- Used by: core/models (data file paths)
- Used by: ui/file_operations.py (file dialogs and operations)
- Used by: All modules requiring consistent path resolution

Directory Structure:
- Data/: Input data files (SEM images, GDS files)
- Results/: Output files organized by processing type
  - Aligned/manual/: Manual alignment results
  - Aligned/auto/: Automatic alignment results
  - SEM_Filters/manual/: Manual filter results
  - SEM_Filters/auto/: Automatic filter results
  - Scoring/overlays/: Overlay images
  - Scoring/charts/: Score visualization charts
  - Scoring/reports/: Processing reports
- Extracted_Structures/: Extracted GDS structure data

Key Features:
- Automatic directory creation with parent directory support
- Consistent path resolution relative to project root
- Cross-platform path handling using pathlib
- Unique filename generation to prevent overwrites
- File listing with extension filtering and recursive search
- Standard results directory structure setup
- Type-safe path operations with Union[str, Path] support

Path Resolution:
- Project root determined relative to this module's location
- All paths resolved relative to project root for consistency
- Support for both absolute and relative path operations
- Automatic handling of path separators across platforms

───── C:\Users\tarik\Desktop\Image_analysis\src\core\utils\logging_utils.py ─────
Advanced logging utilities for the SEM/GDS image analysis application.

This module provides comprehensive logging capabilities including:
- Configurable log levels and rotation
- Module-specific logging
- Performance monitoring
- Log archiving and cleanup
- Context managers for operation tracking

───── C:\Users\tarik\Desktop\Image_analysis\src\core\utils\performance_logging.py ─────
Performance logging module for the SEM/GDS alignment tool.

This module provides utilities for tracking and logging performance metrics
including execution times, memory usage, and operation statistics.

───── C:\Users\tarik\Desktop\Image_analysis\src\core\utils\simple_config.py ─────
Simple Configuration Management - Basic Config File Handling

This module provides a lightweight configuration management system for the
SEM/GDS alignment tool. It handles JSON-based configuration files with
dot-notation access and automatic default value fallback.

Main Class:
- Config: Simple configuration manager with JSON file persistence

Key Methods:
- load(): Loads configuration from JSON file or returns defaults
- save(): Saves current configuration to JSON file
- get(): Retrieves configuration values using dot notation
- set(): Sets configuration values using dot notation
- _get_defaults(): Returns default configuration structure

Global Functions:
- load_config(): Loads configuration using global instance
- get_config(): Gets configuration value using global instance
- set_config(): Sets configuration value using global instance
- save_config(): Saves configuration using global instance

Dependencies:
- Uses: json (configuration file parsing), pathlib.Path (file operations)
- Uses: typing (type hints for Dict, Any)
- Used by: All modules requiring configuration access
- Alternative to: core/utils/config_manager.py (more advanced configuration)

Configuration Structure:
- window: UI window settings (width, height)
- paths: Directory paths (data, results, logs)
- logging: Logging configuration (level)

Features:
- JSON-based configuration persistence
- Dot notation for nested configuration access (e.g., 'window.width')
- Automatic default value fallback if config file missing
- Simple error handling with console output
- Automatic directory creation for config file
- Global configuration instance for easy access

Usage:
- load_config(): Initialize configuration system
- get_config('window.width', 1200): Get value with default
- set_config('window.width', 1600): Set configuration value
- save_config(): Persist changes to file

Default Configuration:
- Window: 1400x900 pixels
- Data directory: 'Data'
- Results directory: 'Results'
- Logs directory: 'logs'
- Logging level: 'INFO'

───── C:\Users\tarik\Desktop\Image_analysis\src\core\utils\simple_logging.py ─────
Simple Logging Utilities - Basic Console and File Logging

This module provides lightweight logging utilities for the SEM/GDS alignment tool.
It offers basic console and file logging with configurable levels and simple
convenience functions for common logging operations.

Main Functions:
- setup_logging(): Configures basic logging with console and optional file output
- get_logger(): Returns logger instance for specified module
- log_error(): Convenience function for error logging
- log_info(): Convenience function for info logging
- log_debug(): Convenience function for debug logging

Dependencies:
- Uses: logging (Python logging framework), sys (stdout access)
- Uses: pathlib.Path (file operations), typing (type hints)
- Uses: inspect (caller module detection)
- Used by: All modules requiring basic logging functionality
- Alternative to: core/utils/logging_utils.py (more advanced logging)

Features:
- Simple logging setup with single function call
- Console logging to stdout with configurable levels
- Optional file logging with automatic directory creation
- Automatic caller module name detection for logger naming
- Convenience functions for common log levels
- Clear existing handlers to avoid duplicate logging
- Standardized log message formatting with timestamps

Logging Levels:
- DEBUG: Detailed diagnostic information
- INFO: General information about program execution
- WARNING: Warning messages for potential issues
- ERROR: Error messages for serious problems

Configuration:
- Default level: INFO
- Default log directory: 'logs'
- Log file name: 'app.log'
- Format: timestamp - module - level - message

Usage:
- setup_logging('DEBUG', True, 'logs'): Enable debug logging to file
- logger = get_logger(__name__): Get module-specific logger
- log_info('Processing started'): Quick info logging
- log_error('Failed to load file'): Quick error logging

Error Handling:
- Graceful fallback if file logging setup fails
- Console output for file logging errors
- Safe logger creation with unknown module fallback

───── C:\Users\tarik\Desktop\Image_analysis\src\core\utils\validation.py ─────
Project Structure Validation - Directory and File Validation Utilities

This module provides validation utilities to ensure the SEM/GDS alignment tool
project structure is complete and properly organized. It checks for required
directories, configuration files, and provides automated setup capabilities.

Main Functions:
- get_required_directories(): Returns list of required project directories
- validate_project_structure(): Validates existence of required directories
- check_missing_directories(): Identifies missing required directories
- create_missing_directories(): Creates missing directories automatically
- validate_config_files(): Validates existence of required configuration files
- run_full_validation(): Performs complete project structure validation
- print_validation_report(): Prints detailed validation status report

Dependencies:
- Uses: pathlib.Path (file system operations), typing (type hints)
- Uses: core/utils/file_utils.get_project_root (project root detection)
- Used by: Application startup routines for structure validation
- Used by: Setup and installation scripts

Required Directory Structure:
- Data/: Input data files
  - Data/SEM/: SEM image files
  - Data/GDS/: GDS layout files
- Results/: Output files
  - Results/Aligned/: Alignment results
  - Results/SEM_Filters/: Filter processing results
  - Results/Scoring/: Scoring and comparison results
- config/: Configuration files
- logs/: Application log files
- src/: Source code
  - src/core/: Core functionality modules
  - src/services/: Service layer modules
  - src/ui/: User interface modules

Required Configuration Files:
- config/config.json: Main application configuration
- requirements.txt: Python package dependencies
- README.md: Project documentation

Features:
- Comprehensive project structure validation
- Automatic missing directory creation
- Configuration file existence checking
- Detailed validation reporting with status indicators
- Error handling for directory creation failures
- Summary statistics for validation results

Validation Process:
1. Check all required directories exist
2. Validate configuration files are present
3. Report missing components
4. Optionally create missing directories
5. Provide detailed status report

Usage:
- run_full_validation(): Quick validation check
- print_validation_report(): Detailed status report
- create_missing_directories(): Auto-fix missing directories
- check_missing_directories(): List what needs to be created

Return Values:
- Boolean results for pass/fail validation
- Dictionary mappings for detailed status
- List of missing components for targeted fixes

───── C:\Users\tarik\Desktop\Image_analysis\src\core\utils\__init__.py ─────
Core utilities for file handling, logging, configuration, and validation.

Basic utility functions for the SEM/GDS Alignment Tool:
- File and directory management
- Simple logging setup
- Basic configuration management
- Error handling
- Project structure validation

Functions:
    File Utils: get_project_root, ensure_directory, get_data_path, get_results_path
    Logging Utils: setup_logging, get_logger
    Config Utils: load_config, get_config, set_config
    Error Handling: safe_file_operation, handle_errors, show_error_message
    Validation: validate_project_structure, run_full_validation

───── C:\Users\tarik\Desktop\Image_analysis\src\services\auto_alignment_service.py ─────
Auto Alignment Service - Automatic Image Alignment Operations

This service handles automatic alignment operations between SEM images and GDS
layouts using computer vision algorithms. It provides threaded alignment processing,
transformation parameter extraction, and real-time progress reporting.

Main Class:
- AutoAlignmentService: Qt-based service for automatic alignment operations

Key Methods:
- initialize(): Sets up service with GDS model and SEM image
- set_alignment_method(): Configures alignment algorithm (ORB, brute force)
- start_auto_alignment(): Begins automatic alignment process in worker thread
- stop_auto_alignment(): Cancels running alignment operation
- apply_alignment_result(): Applies computed transformation to GDS model
- reset_transforms(): Resets all transformations to default values
- get_current_transform(): Returns current transformation parameters
- get_current_state(): Returns complete service state information

Signals Emitted:
- alignment_started: Auto alignment process begins
- alignment_progress(int, str): Progress percentage and status message
- alignment_completed(dict): Alignment results with transformation data
- auto_alignment_completed: Process completion notification
- alignment_failed(str): Error message when alignment fails
- transform_updated(dict): Updated transformation parameters
- bitmap_rendered(np.ndarray): New rendered bitmap after transformation
- state_changed(dict): Service state changes with context

Dependencies:
- Uses: PySide6.QtCore (QObject, Signal, QThread for threading)
- Uses: numpy (transformation matrix operations)
- Uses: core/models (AlignedGdsModel, SemImage data models)
- Uses: services/transformations/auto_alignment_service (worker implementation)
- Used by: ui/alignment_controller.py (alignment UI coordination)
- Used by: ui/workflow_controller.py (automatic workflow management)

Alignment Methods:
- ORB: Oriented FAST and Rotated BRIEF feature matching
- Brute Force: Exhaustive search alignment method
- Extensible architecture for additional algorithms

Transformation Support:
- Translation (X, Y pixel offsets)
- Rotation (degrees, extracted from transformation matrix)
- Scaling (uniform scale factor)
- Transparency (UI overlay parameter)
- Matrix-based transformation representation

Threading Architecture:
- Worker thread for CPU-intensive alignment operations
- Progress reporting during long-running computations
- Safe thread cleanup and resource management
- Non-blocking UI during alignment processing

Features:
- Multiple alignment algorithm support
- Real-time progress reporting with percentage and status
- Automatic transformation parameter extraction from matrices
- Thread-safe alignment processing
- Error handling with detailed failure reporting
- State management for UI synchronization
- Canvas size adaptation for different display contexts
- Transform reset and parameter management

Workflow:
1. Initialize with GDS model and SEM image
2. Select alignment method (ORB, brute force, etc.)
3. Start automatic alignment in worker thread
4. Monitor progress through signal emissions
5. Extract transformation parameters from result matrix
6. Apply transformations to GDS model
7. Render updated alignment and emit bitmap
8. Handle success/failure states appropriately

───── C:\Users\tarik\Desktop\Image_analysis\src\services\base_service.py ─────
Base Service Class - Foundation for All Service Classes

This module provides the foundational base class that all service classes inherit from.
It establishes common patterns, error handling, logging, and signal/slot communication
that ensures consistency across the entire services layer.

Key Features:
- Standardized Qt signal/slot patterns for UI communication
- Centralized error handling and reporting mechanisms
- Integrated logging with service-specific loggers
- Common state management patterns
- Progress reporting and status updates

Common Signals (inherited by all services):
- operation_started: Emitted when any operation begins
- operation_completed: Emitted when operations finish successfully
- operation_failed: Emitted when operations encounter errors
- progress_updated: Emitted for progress reporting (0-100%)
- status_changed: Emitted for status message updates

State Management:
- Tracks current operation and busy state
- Provides operation history and error tracking
- Handles service lifecycle and cleanup

Dependencies:
- Uses: PySide6.QtCore (QObject, Signal)
- Uses: src.core.utils.logging_utils (logging integration)
- Inherited by: All service classes in the services package

Usage Pattern:
1. Service inherits from BaseService
2. Service implements specific business logic
3. Service uses _start_operation() and _complete_operation() for state management
4. Service emits standardized signals for UI communication
5. UI connects to service signals for updates

Benefits:
- Consistent error handling across all services
- Standardized progress reporting
- Centralized logging configuration
- Reduced code duplication
- Easier debugging and maintenance

───── C:\Users\tarik\Desktop\Image_analysis\src\services\file_listing_service.py ─────
File Listing Service - Data File Discovery and Management

This service handles the discovery, scanning, and listing of available SEM images
and GDS layout files in the project data directories. It provides file system
monitoring and metadata extraction for data file management.

Main Class:
- FileListingService: Qt-based service for file discovery and listing

Key Methods:
- scan_data_directory(): Scans Data directory for SEM and GDS files
- get_sem_files(): Returns list of available SEM image files
- get_gds_files(): Returns list of available GDS layout files
- refresh(): Rescans directories to update file lists
- get_file_info(): Extracts metadata information for specific files
- _get_file_type(): Determines file type based on extension and location

Signals Emitted:
- files_updated(dict): Emitted when file lists are updated with new scan results

Dependencies:
- Uses: pathlib.Path (file system operations), typing (type hints)
- Uses: PySide6.QtCore (QObject, Signal for Qt integration)
- Uses: core/utils (get_data_path, list_files_by_extension utilities)
- Used by: ui/file_selector.py (file selection dialogs)
- Used by: services/file_service.py (file loading operations)

Supported File Types:
- SEM Images: .tif, .tiff, .png formats
- GDS Layouts: .gds format
- Automatic file type detection based on extension and directory location

Directory Structure:
- Data/SEM/: SEM image files (.tif, .tiff, .png)
- Data/GDS/: GDS layout files (.gds)
- Recursive scanning within subdirectories
- Alphabetical sorting of discovered files

File Information:
- File name and full path
- File size in bytes
- Last modified timestamp
- File extension and detected type
- Metadata extraction for file properties

Features:
- Automatic file type detection based on extension
- Recursive directory scanning for comprehensive file discovery
- File metadata extraction (size, modification time, type)
- Sorted file lists for consistent UI presentation
- Signal-based updates for reactive UI components
- Error handling for missing or inaccessible directories
- Efficient file system operations with pathlib

Usage Pattern:
1. Service scans Data/SEM and Data/GDS directories
2. Discovers files with supported extensions
3. Extracts metadata for each discovered file
4. Sorts files alphabetically by name
5. Emits files_updated signal with complete file lists
6. UI components connect to signal for automatic updates
7. Provides file information on demand for selection dialogs

Refresh Capability:
- Manual refresh through refresh() method
- Automatic rescanning when directories change
- Signal emission for UI synchronization
- Maintains current file list state between scans

───── C:\Users\tarik\Desktop\Image_analysis\src\services\file_loading_service.py ─────
File Loading Service - SEM and GDS File Loading Operations

This service handles loading SEM images and GDS layout files into their respective
data models with automatic processing, cropping, and error handling. It provides
fallback mechanisms for different model interfaces and batch loading capabilities.

Main Functions:
- get_predefined_structure_info(): Returns metadata for predefined GDS structures

Main Class:
- FileLoadingService: Qt-based service for file loading operations

Key Methods:
- load_sem_image(): Loads SEM images with automatic 1024x666 cropping
- load_gds(): Loads GDS files with structure-specific bounds and layers
- get_current_sem(): Returns currently loaded SEM image
- get_current_gds(): Returns currently loaded GDS model
- clear_all(): Clears all loaded files from memory
- get_loading_status(): Returns status of loaded files
- load_multiple_sem_images(): Batch loading of multiple SEM files

Signals Emitted:
- sem_loaded(object): SEM image successfully loaded
- gds_loaded(object): GDS model successfully loaded
- aligned_gds_loaded(object): AlignedGdsModel successfully loaded
- loading_error(str): Error message when loading fails

Dependencies:
- Uses: pathlib.Path, cv2 (OpenCV), numpy (image processing)
- Uses: PySide6.QtCore (QObject, Signal for Qt integration)
- Uses: core/models (InitialGdsModel, AlignedGdsModel, SemImage)
- Uses: core/utils.get_logger (logging functionality)
- Used by: ui/file_operations.py (file loading UI)
- Used by: services/workflow_service.py (automated workflows)

Predefined GDS Structures:
1. Circpol_T2: bounds (688.55, 5736.55, 760.55, 5807.1), layer 14
2. IP935Left_11: bounds (693.99, 6406.40, 723.59, 6428.96), layers 1,2
3. IP935Left_14: bounds (980.959, 6025.959, 1001.770, 6044.979), layer 1
4. QC855GC_CROSS_Bottom: bounds (3730.00, 4700.99, 3756.00, 4760.00), layers 1,2
5. QC935_46: bounds (7195.558, 5046.99, 7203.99, 5055.33964), layer 1

SEM Image Processing:
- Automatic cropping to 1024x666 pixels (removes bottom portion)
- Support for .tif, .tiff, .png formats
- Fallback loading mechanisms for different SemImage interfaces
- Grayscale conversion and resizing when necessary
- Center-horizontal, top-vertical cropping strategy

GDS Loading Features:
- Structure-specific bounds and layer filtering
- Integration with InitialGdsModel and AlignedGdsModel
- Predefined structure metadata lookup
- Feature-focused model creation
- Alignment parameter support (planned)

Error Handling:
- Comprehensive exception handling for file operations
- Fallback mechanisms for missing model methods
- Detailed error logging and signal emission
- Graceful degradation when loading fails

Batch Operations:
- Multiple SEM image loading with individual error handling
- Progress tracking and success/failure reporting
- Memory-efficient processing of file lists

State Management:
- Current file tracking for SEM, GDS, and aligned models
- Loading status reporting
- Memory cleanup and file clearing operations

───── C:\Users\tarik\Desktop\Image_analysis\src\services\file_service.py ─────
File Service - Comprehensive File Management and Data Operations

This service provides comprehensive file management capabilities for the SEM/GDS
alignment tool including loading, saving, and processing of various file formats.
It handles SEM images, GDS files, alignment results, and provides fallback
mechanisms for different model interfaces.

Main Class:
- FileManager: Central file management service with directory structure management

Key Methods:
- load_sem_images(): Loads SEM images with automatic cropping and fallback mechanisms
- load_gds_files(): Loads GDS files with multiple interface fallbacks
- load_gds_file(): Loads single GDS file with error handling
- generate_structure_data(): Generates structure data for alignment operations
- save_file(): Generic file saving with format detection (JSON, CSV, images)
- load_file(): Generic file loading with format detection
- save_alignment_results(): Saves alignment results with organized directory structure
- save_scoring_results(): Saves scoring results with charts and reports
- save_aligned_gds(): Saves transformed GDS files with applied transformations
- save_aligned_image(): Saves aligned GDS as image using frame extraction
- get_available_sem_files(): Lists available SEM files in data directory
- get_available_gds_files(): Lists available GDS files in data directory
- cleanup_temp_files(): Cleans up temporary files and directories

Global Functions:
- create_file_manager(): Factory function for FileManager instances

Dependencies:
- Uses: os, json, csv, logging, tempfile, pathlib.Path (standard libraries)
- Uses: imageio, numpy (image processing)
- Uses: core/models (SemImage, GDSModel data models)
- Uses: services/gds_image_service.GDSImageService (GDS image operations)
- Uses: core/models/structure_definitions.get_default_structures (structure metadata)
- Uses: services/gds_transformation_service (GDS transformations)
- Uses: services/frame_extraction_service (image extraction)
- Used by: UI components for file operations
- Used by: Workflow services for automated processing

Directory Structure Management:
- Data/SEM/: SEM image files (.tif, .tiff)
- Data/GDS/: GDS layout files (.gds)
- Results/: Output files organized by type
- Results/Aligned/: Alignment results
- Results/Scoring/: Scoring results with charts and reports
- Extracted_Structures/: Extracted structure data
- Automatic directory creation and validation

Supported File Formats:
- Images: PNG, JPG, TIFF, TIF (via imageio)
- Data: JSON, CSV (structured data)
- GDS: .gds layout files (via gdspy/gdstk)
- SEM: .tif, .tiff image files with automatic processing

Fallback Mechanisms:
- Multiple loading methods for SemImage (from_file, load, manual)
- Multiple loading methods for GDSModel (from_file, load, constructor)
- Graceful degradation when methods are missing
- Error handling with detailed logging

Structure Data Generation:
- Integration with structure manager for metadata
- Multiple extraction methods with fallbacks
- Temporary file handling for image generation
- Coordinate and bounds extraction
- Binary image generation for alignment

Alignment and Scoring Results:
- Organized directory structure for results
- JSON metadata with image files
- Chart and report generation
- Transformation parameter preservation
- Batch processing capabilities

GDS Transformation Support:
- Aligned GDS file generation with applied transformations
- Integration with transformation services
- Coordinate system conversion
- Structure preservation with modifications
- Image extraction from transformed GDS

Error Handling:
- Comprehensive exception handling for all operations
- Detailed logging with operation context
- Graceful fallbacks for missing methods
- File existence validation
- Directory creation with error recovery

Features:
- Automatic SEM image cropping to 1024x666 pixels
- Multi-format file support with automatic detection
- Batch processing for multiple files
- Temporary file management and cleanup
- Structured result organization
- Fallback mechanisms for API compatibility

───── C:\Users\tarik\Desktop\Image_analysis\src\services\frame_extraction_service.py ─────
Frame Extraction Service - GDS Frame-Based Data Extraction

This service handles extraction of GDS layout data using a frame-based approach
that applies transformations to the viewport rather than modifying the underlying
GDS data. It provides bitmap generation and file export capabilities with
transformation support.

Main Class:
- FrameExtractionService: Frame-based GDS data extraction service

Key Methods:
- extract_to_bitmap(): Extracts GDS structure as bitmap using frame transformations
- extract_to_file(): Extracts bitmap and saves to file with format support
- _get_structure_id(): Converts structure names to numeric IDs
- _calculate_pixel_size(): Calculates pixel size from GDS bounds and output resolution
- _apply_transformations(): Applies transformation parameters to model frame

Dependencies:
- Uses: logging, pathlib.Path (standard libraries)
- Uses: numpy (array operations), PIL.Image (image saving)
- Uses: core/models/simple_aligned_gds_model (AlignedGdsModel, create_aligned_model_for_structure)
- Used by: services/file_service.py (aligned image saving)
- Used by: UI components for GDS visualization

Frame-Based Approach:
- Transformations applied to viewport/frame only
- Original GDS data remains unmodified
- View frame defines extraction region and transformations
- Non-destructive transformation pipeline
- Preserves original coordinate system integrity

Transformation Support:
- Translation: X/Y offset in pixels converted to GDS units
- Scaling: Uniform scale factor applied to frame
- Rotation: 90-degree increments plus residual rotation
- Coordinate system conversion between UI pixels and GDS units
- Transformation parameter validation and bounds checking

Structure ID Mapping:
- Circpol_T2: ID 1
- IP935Left_11: ID 2
- IP935Left_14: ID 3
- QC855GC_CROSS_Bottom: ID 4
- QC935_46: ID 5
- main: ID 0 (default)
- Hash-based fallback for unknown structure names

Bitmap Generation:
- Configurable output resolution (default 1024x666)
- Layer filtering support for selective rendering
- Grayscale bitmap output with proper scaling
- Memory-efficient processing for large structures
- Error handling with fallback mechanisms

File Export Features:
- Multiple image format support via PIL
- Automatic directory creation for output paths
- Grayscale conversion with proper intensity scaling
- File existence validation and error recovery
- Detailed logging for debugging and monitoring

Pixel Size Calculation:
- Automatic calculation from GDS bounds and output resolution
- Aspect ratio preservation with limiting dimension approach
- Minimum pixel size validation for edge cases
- Coordinate system scaling for proper visualization
- Error handling with reasonable defaults

Error Handling:
- Comprehensive exception handling for all operations
- Detailed logging with context information
- Graceful fallbacks for missing or invalid data
- Parameter validation with default value substitution
- File operation error recovery

Advantages over Legacy Approach:
- Non-destructive: Original GDS data preserved
- Efficient: No polygon modification required
- Flexible: Easy to adjust view parameters
- Accurate: Maintains coordinate system precision
- Scalable: Handles large structures efficiently

Usage Pattern:
1. Create FrameExtractionService instance
2. Define transformation parameters (translation, rotation, scale)
3. Specify GDS bounds and output resolution
4. Extract bitmap or save to file
5. Service handles coordinate conversion and rendering

───── C:\Users\tarik\Desktop\Image_analysis\src\services\gds_image_service.py ─────
GDS Image Service - Binary Image Generation from GDS Structures

This service generates binary images from GDS layout structures with scaling,
rendering, and conversion capabilities to match SEM image dimensions. It provides
caching, batch processing, and overlay generation for alignment visualization.

Main Class:
- GDSImageService: Service for generating binary images from GDS structures

Key Methods:
- load_gds_file(): Loads GDS file for image generation
- generate_binary_image(): Generates binary image from GDS structure with caching
- generate_multiple_images(): Batch generation of binary images
- save_structure_image_with_bounds(): Saves structure image with custom bounds and rotation
- scale_to_dimensions(): Scales images to target dimensions with aspect ratio control
- render_polygons(): Renders polygon data to binary images
- generate_structure_overlay(): Creates overlay images for alignment visualization
- save_structure_image(): Saves structure binary image to file
- save_multiple_structure_images(): Batch saving of structure images
- get_structure_info(): Retrieves structure metadata and GDS information
- list_available_structures(): Lists available structure names
- is_gds_loaded(): Checks if GDS file is loaded
- get_gds_info(): Returns loaded GDS file information

Dependencies:
- Uses: numpy, cv2 (OpenCV), sys, pathlib.Path (standard libraries)
- Uses: PIL.Image (image processing and rotation)
- Uses: core/models/simple_initial_gds_model.InitialGdsModel (GDS data model)
- Uses: core/models/structure_definitions (StructureDefinition, StructureDefinitionManager)
- Used by: services/file_service.py (structure data generation)
- Used by: UI components for GDS visualization

Image Generation Features:
- Binary image generation from GDS polygon data
- Configurable output dimensions (default 1024x666 for SEM matching)
- Image caching for performance optimization
- Batch processing for multiple structures
- Custom bounds and layer filtering
- 90-degree rotation support for alignment

Scaling and Rendering:
- Aspect ratio preservation with centering
- Coordinate system conversion (GDS to image pixels)
- Y-axis flipping for proper orientation
- Polygon filling with OpenCV
- White background with black structure rendering
- Clipping and bounds validation

Overlay Generation:
- Opacity-controlled overlay images for alignment visualization
- Structure mask generation for transparency effects
- Grayscale overlay output for UI composition
- Real-time preview support

File Operations:
- Multiple image format support (PNG, JPG, TIFF)
- Automatic directory creation for output paths
- Batch saving with success/failure tracking
- Custom bounds and rotation parameters
- Error handling with detailed logging

Caching System:
- Image cache based on structure name and dimensions
- Cache invalidation on GDS file reload
- Memory-efficient caching for repeated operations
- Performance optimization for UI responsiveness

Structure Management:
- Integration with StructureDefinitionManager
- Structure metadata extraction and validation
- Layer information and bounds retrieval
- Available structure listing
- GDS file information reporting

Coordinate System Handling:
- GDS coordinate to pixel coordinate conversion
- Scaling factor calculation from bounds and dimensions
- Y-axis orientation correction (GDS up vs image down)
- Bounds clipping and validation
- Transformation parameter support

Error Handling:
- Comprehensive exception handling for all operations
- Graceful fallbacks for missing structures or data
- Detailed error reporting with context
- File operation validation
- Parameter validation with defaults

Constants:
- DEFAULT_WIDTH: 1024 (standard SEM width after cropping)
- DEFAULT_HEIGHT: 666 (standard SEM height after cropping)
- Consistent dimensions for SEM/GDS alignment

Usage Pattern:
1. Create GDSImageService instance
2. Load GDS file using load_gds_file()
3. Generate binary images for structures
4. Apply scaling, rotation, or overlay effects
5. Save results to files or use in UI
6. Cache provides performance for repeated operations

───── C:\Users\tarik\Desktop\Image_analysis\src\services\gds_transformation_service.py ─────
GDS Transformation Service - GDS Layout Transformation Operations

This service handles transformation of GDS layout structures including translation,
rotation, and scaling operations. It modifies polygon coordinates directly and
creates new GDS files with applied transformations.

Main Class:
- GdsTransformationService: Service for transforming GDS structures

Key Methods:
- transform_structure(): Transforms GDS structure with specified parameters
- _get_cell_polygons(): Extracts polygons from gdstk cell with API compatibility
- save_transformed_gds(): Saves transformed cell to new GDS file
- validate_transformation_parameters(): Validates transformation parameter ranges

Dependencies:
- Uses: gdstk (GDS file operations), numpy (array operations), math (trigonometry)
- Uses: pathlib.Path (file operations)
- Uses: utils/transformations (transformation utilities and validation)
- Used by: services/file_service.py (aligned GDS saving)
- Used by: UI components for GDS transformation

Transformation Operations:
- Translation: X/Y offset in pixels converted to GDS units
- Scaling: Uniform scale factor applied to polygon coordinates
- Rotation: Arbitrary angle rotation around structure center
- Coordinate system conversion between UI pixels and GDS units
- Center-based transformations for intuitive behavior

GDS File Handling:
- gdstk library integration for GDS file operations
- Cell and polygon extraction with API compatibility
- Structure name lookup with fallback to top-level cells
- Layer and datatype preservation during transformation
- New GDS file creation with transformed structures

Polygon Processing:
- Direct coordinate modification of polygon points
- Preservation of layer and datatype information
- Batch processing of all polygons in structure
- Error handling for malformed polygon data
- Memory-efficient processing for large structures

Coordinate System:
- GDS coordinate to pixel coordinate conversion
- Y-axis flipping for proper orientation (GDS up vs UI down)
- Center-based transformation calculations
- Scale factor computation from bounds and canvas size
- Precision handling for coordinate accuracy

API Compatibility:
- Multiple gdstk API version support
- Fallback methods for polygon extraction
- Mock polygon objects for compatibility
- Graceful handling of missing methods or attributes
- Error recovery for API differences

Transformation Pipeline:
1. Load GDS file and locate target structure
2. Extract all polygons with layer information
3. Calculate transformation parameters and center point
4. Apply transformations: translate to origin, scale, rotate, translate back, offset
5. Create new cell with transformed polygons
6. Save to new GDS file with preserved metadata

Error Handling:
- File existence validation
- Structure name verification with fallbacks
- Polygon extraction error recovery
- Transformation parameter validation
- GDS file writing error handling

Features:
- Non-destructive: Creates new files, preserves originals
- Precise: Maintains coordinate system accuracy
- Flexible: Supports arbitrary transformation parameters
- Compatible: Works with different gdstk API versions
- Robust: Comprehensive error handling and validation

───── C:\Users\tarik\Desktop\Image_analysis\src\services\manual_alignment_service.py ─────
Manual Alignment Service - User-Controlled Alignment Operations

This service handles manual alignment operations with real-time UI updates and
interactive transformation controls. It provides immediate visual feedback for
user-driven alignment adjustments and maintains synchronization between UI
controls and the underlying GDS model.

Main Class:
- ManualAlignmentService: Qt-based service for manual alignment operations

Key Methods:
- initialize(): Sets up service with GDS model and SEM image
- set_sem_image(): Updates SEM image for overlay rendering
- update_transform_parameter(): Updates single transformation parameter
- update_transforms(): Batch updates multiple transformation parameters
- reset_transforms(): Resets all transformations to default values
- get_current_transform(): Returns current transformation parameters
- get_current_state(): Returns complete service state information
- set_canvas_size(): Updates canvas dimensions for rendering
- _apply_transform_to_model(): Applies transformation to underlying model
- _render_and_emit(): Renders current state and emits bitmap
- _emit_state_change(): Emits state change notifications

Signals Emitted:
- transform_updated(dict): Transformation parameters updated
- manual_alignment_updated(): Manual alignment state changed
- bitmap_rendered(np.ndarray): New rendered bitmap available
- state_changed(dict): Service state changed with context

Dependencies:
- Uses: PySide6.QtCore (QObject, Signal for Qt integration)
- Uses: numpy (array operations), logging (error reporting)
- Uses: core/models (AlignedGdsModel, SemImage data models)
- Used by: ui/alignment_controller.py (manual alignment UI)
- Used by: ui/alignment_controls.py (transformation controls)

Transformation Parameters:
- translate_x: Horizontal translation in pixels
- translate_y: Vertical translation in pixels
- rotation: Rotation angle in degrees
- scale: Uniform scale factor
- transparency: UI overlay transparency (0.0 to 1.0)

Real-Time Features:
- Immediate visual feedback for parameter changes
- Live bitmap rendering with transformation updates
- Synchronous UI control and model state updates
- Interactive transformation preview
- Responsive parameter adjustment

Model Integration:
- Direct API calls to AlignedGdsModel for transformations
- Frame-based rendering approach for non-destructive operations
- Coordinate system conversion between UI pixels and GDS units
- Proper API mapping for different transformation types
- Error handling for model operations

State Management:
- Current transformation parameter tracking
- Canvas size adaptation for different display contexts
- SEM image integration for overlay rendering
- Service initialization and reset capabilities
- State synchronization between UI and model

Canvas and Rendering:
- Configurable canvas size (default 1024x666)
- Frame-based bitmap generation
- Transparency support for overlay composition
- Error handling for rendering operations
- Signal emission for UI updates

Error Handling:
- Parameter validation with descriptive error messages
- Graceful handling of missing models or images
- Render error recovery with state notifications
- Logging integration for debugging and monitoring
- Safe fallbacks for API call failures

User Experience:
- Immediate visual feedback for all parameter changes
- Smooth real-time transformation preview
- Intuitive parameter mapping to visual effects
- Consistent state management across UI components
- Responsive interaction with minimal latency

Workflow:
1. Initialize service with GDS model and optional SEM image
2. User adjusts transformation parameters via UI controls
3. Service updates model and renders new bitmap
4. UI receives bitmap and displays updated alignment
5. Process repeats for interactive alignment refinement
6. Final transformation parameters available for export

Advantages:
- Real-time: Immediate visual feedback
- Interactive: Direct user control over all parameters
- Non-destructive: Frame-based transformations preserve original data
- Responsive: Optimized for smooth UI interaction
- Flexible: Supports arbitrary transformation combinations

───── C:\Users\tarik\Desktop\Image_analysis\src\services\new_gds_service.py ─────
New GDS Service - Simplified GDS Loading and Display System

This service provides a simplified approach to GDS loading and display operations
based on proven working code. It replaces complex GDS loading systems with
straightforward methods and provides caching for performance optimization.

Main Class:
- NewGDSService: Simplified GDS service with working code implementation

Key Methods:
- load_gds_file(): Loads GDS file with validation
- get_structure_info(): Returns structure metadata by number
- list_available_structures(): Lists available structure numbers
- get_all_structures_info(): Returns all structure information
- generate_structure_display(): Generates display image for structure
- generate_structure_aligned(): Generates aligned structure with transformations
- generate_structure_with_simple_transforms(): Applies simple transformations
- get_structure_by_name(): Maps structure names to numbers
- generate_binary_image(): Compatibility method for binary image generation
- clear_cache(): Clears all cached images
- get_structure_bounds(): Returns structure bounds
- get_structure_layers(): Returns structure layer information
- validate_structure_number(): Validates structure number availability
- get_file_info(): Returns GDS file information
- _generate_with_custom_bounds(): Generates structure with custom bounds

Global Functions:
- load_and_generate_structure(): One-shot function for loading and generation
- create_structure_overlay(): Creates structure overlay with transformations

Dependencies:
- Uses: numpy, cv2 (OpenCV), gdspy, os, pathlib.Path (standard libraries)
- Uses: core/gds_display_generator (display generation functions)
- Uses: core/gds_aligned_generator (alignment and transformation functions)
- Used by: UI components for GDS visualization
- Used by: Services requiring simplified GDS operations

Structure Management:
- Predefined structure numbers (1-5) with metadata
- Structure name to number mapping
- Bounds and layer information retrieval
- Structure validation and availability checking
- File information and statistics

Caching System:
- Display image caching for performance
- Structure metadata caching
- Cache invalidation and clearing
- Memory-efficient caching strategy
- Performance optimization for repeated operations

Image Generation:
- Display image generation with configurable size
- Aligned image generation with transformation parameters
- Simple transformation support (rotation, zoom, movement)
- Custom bounds support for cropping
- Binary image generation for compatibility

Transformation Support:
- Rotation: Arbitrary angle rotation in degrees
- Zoom: Percentage-based scaling (100 = no change)
- Movement: X/Y translation in pixels
- Complex transformation parameter dictionaries
- Simple parameter interface for ease of use

Structure Mapping:
- Structure 1: Circpol_T2
- Structure 2: IP935Left_11
- Structure 3: IP935Left_14
- Structure 4: QC855GC_CROSS_Bottom
- Structure 5: QC935_46
- Name-based lookup with fallback handling

File Operations:
- GDS file loading with validation
- File existence checking
- File size and metadata extraction
- Error handling for file operations
- Path management and resolution

Error Handling:
- Comprehensive exception handling for all operations
- Graceful fallbacks for missing functions or data
- Detailed error reporting with context
- File operation validation
- Structure availability checking

Compatibility Features:
- Backward compatibility methods for existing code
- Name-based structure lookup
- Binary image generation interface
- Simple parameter interfaces
- Fallback mechanisms for API differences

Performance Optimization:
- Image caching for repeated operations
- Lazy loading of structure data
- Efficient memory management
- Optimized rendering pipeline
- Cache management and cleanup

Usage Pattern:
1. Create NewGDSService instance
2. Load GDS file using load_gds_file()
3. Generate structure displays or aligned images
4. Apply transformations as needed
5. Cache provides performance for repeated operations
6. Clear cache when switching files or contexts

Advantages:
- Simple: Straightforward API with minimal complexity
- Reliable: Based on proven working code
- Fast: Caching and optimization for performance
- Flexible: Multiple generation and transformation options
- Compatible: Maintains compatibility with existing interfaces

───── C:\Users\tarik\Desktop\Image_analysis\src\services\overlay.py ─────
Overlay Service - Structure Overlay Rendering on SEM Images

This service handles rendering of extracted GDS structure binary images onto SEM
images with coordinate transformation, multiple rendering modes, and interactive
transformation support including rotation, zoom, and pan operations.

Main Classes:
- OverlayRenderer: Renders structure overlays with coordinate transformations
- OverlayError: Custom exception for overlay rendering errors

Key Methods:
- __init__(): Initializes renderer with SEM image and GDS bounds
- _apply_transformations(): Applies rotation, zoom, and pan transformations
- _coordinate_to_pixel(): Converts coordinate space to pixel positions
- _pixel_to_sem_coordinate(): Converts pixel positions to SEM coordinates
- render_overlay(): Renders structure overlays with transformations
- _render_structure(): Renders individual structure with coordinate transformation
- _is_edge_pixel(): Detects edge pixels for edge rendering mode
- render_composite(): Creates composite overlay on background image
- get_transformed_bounds(): Returns coordinate bounds after transformations
- export_overlay_image(): Exports overlay as image file

Dependencies:
- Uses: numpy (array operations), imageio (image I/O)
- Uses: matplotlib.path.Path (path operations), typing (type hints)
- Uses: core/models.SemImage (SEM image data model)
- Used by: UI components for overlay visualization
- Used by: Alignment services for visual feedback

Coordinate System Management:
- GDS coordinate space to pixel space conversion
- SEM image coordinate system integration
- Frame-based transformation calculations
- Y-axis flipping for proper image orientation
- Scale factor computation for coordinate mapping

Transformation Operations:
- Rotation: Arbitrary angle rotation around center point
- Zoom: Scale factor with center-based zooming (1.1 = 110% zoom in)
- Pan: Translation in coordinate units (X/Y offsets)
- Combined transformations with proper order of operations
- Bounding box calculations after transformations

Rendering Modes:
- filled: Solid filled structures
- edges: Edge-only rendering with configurable line width
- mask: Binary mask rendering
- composite: Full-color composite with transparency
- Antialiasing support for smooth edges

Overlay Features:
- Multiple structure overlay support
- Configurable overlay colors and transparency
- Background image integration
- Structure positioning with coordinate offsets
- Clipping and bounds checking for safe rendering

Coordinate Transformations:
- Frame bounds calculation with rotation support
- Corner-based rotation for accurate bounding boxes
- Normalized coordinate conversion (0-1 range)
- Pixel-perfect coordinate mapping
- Inverse transformations for coordinate recovery

Image Processing:
- Binary image overlay composition
- Maximum value blending for multiple structures
- RGB composite generation with transparency
- Edge detection for outline rendering
- Safe array indexing with bounds checking

Error Handling:
- SEM image validation and fallback dimensions
- Coordinate bounds checking and clipping
- Safe array operations with boundary validation
- Graceful handling of missing image data
- Custom exception types for specific error conditions

Performance Optimization:
- Efficient numpy array operations
- Minimal memory allocation for large images
- Optimized coordinate transformation calculations
- Cached transformation matrices where applicable
- Memory-efficient overlay composition

Export Capabilities:
- Multiple export formats via imageio
- Configurable export modes (overlay, composite, mask)
- High-quality image output with proper scaling
- Metadata preservation where supported
- Batch export support for multiple overlays

Usage Pattern:
1. Initialize OverlayRenderer with SEM image and GDS bounds
2. Prepare structure data as binary images with coordinates
3. Apply desired transformations (rotation, zoom, pan)
4. Render overlay using appropriate mode
5. Export or display the resulting overlay image
6. Repeat with different parameters for interactive adjustment

Advantages:
- Accurate: Precise coordinate system handling
- Flexible: Multiple rendering modes and transformations
- Interactive: Real-time transformation support
- Efficient: Optimized for performance with large images
- Extensible: Easy to add new rendering modes and features

───── C:\Users\tarik\Desktop\Image_analysis\src\services\simple_alignment_service.py ─────
Simple Alignment Service - Core Alignment and Transform Management

This service provides comprehensive alignment capabilities for SEM/GDS image registration,
including manual transformations, semi-automatic point-based alignment, and fully automatic
feature-based alignment. It serves as the central coordination point for all alignment operations.

Main Class:
- AlignmentService: Qt-based service for comprehensive alignment operations

Key Methods:
- set_images(): Sets SEM and GDS images for alignment
- reset_transform(): Resets transformation to identity
- translate(): Applies translation with relative/absolute positioning
- rotate(): Applies rotation in 90-degree increments (snapped for precision)
- scale(): Applies uniform or non-uniform scaling with bounds checking
- set_transform_parameters(): Direct parameter setting with validation
- add_point_pair(): Adds point pairs for semi-automatic alignment
- calculate_transform_from_points(): Calculates transform from point pairs
- automatic_alignment(): Performs feature-based automatic alignment
- calculate_hybrid_alignment(): Calculates affine transformation from 3 point pairs
- calculate_transformation_with_preview(): Enhanced calculation with preview support
- apply_transform_to_image(): Applies current transform to images
- save_transform_state(): Saves current transformation state
- load_transform_state(): Loads previously saved transformation state

Signals Emitted:
- transform_updated(dict): Transform parameters changed
- alignment_completed(str, dict, float): Alignment operations finished
- alignment_updated(dict): Incremental alignment updates
- alignment_progress(int): Progress reporting (0-100%)
- point_pair_added(tuple, tuple): Manual points selected
- automatic_features_detected(int, int): Features found
- alignment_started(str): Operation lifecycle start
- alignment_finished(str, bool): Operation lifecycle completion
- alignment_error(str): Error messages
- error_occurred(str): General error notifications

Dependencies:
- Uses: cv2 (OpenCV for computer vision operations)
- Uses: numpy (matrix operations and numerical computing)
- Uses: PySide6.QtCore (signals and QObject)
- Uses: logging (error reporting and debugging)
- Called by: ui/alignment_controller.py, ui/alignment_operations.py
- Called by: services/manual_alignment_service.py, services/auto_alignment_service.py

Transform Management:
- 3x3 homogeneous transformation matrices for complete geometric transforms
- Real-time transform parameter tracking (translation, rotation, scale)
- Transform history with undo capabilities
- State management for alignment operations
- Transform validation and bounds checking
- Transform order: Movement -> Rotation -> Zoom (critical for UI consistency)

Manual Transform Operations:
- Translation with relative/absolute positioning
- Rotation in 90-degree increments (snapped for precision)
- Uniform or non-uniform scaling with bounds checking
- Direct parameter setting with comprehensive validation
- Real-time matrix updates and parameter synchronization

Semi-Automatic Alignment:
- 3-point correspondence alignment for affine transformations
- Point pair management with validation
- Homography calculation using cv2.findHomography
- Affine transform calculation for 2-3 point pairs
- Transform parameter extraction from matrices
- Quality assessment based on point transformation accuracy

Automatic Alignment:
- Feature-based matching using ORB, SIFT, or SURF detectors
- Keypoint detection and descriptor matching
- RANSAC-based robust homography estimation
- Feature quality assessment and filtering
- Multiple algorithm support with fallback mechanisms
- Automatic parameter tuning based on image characteristics

Hybrid Alignment Workflow:
- User selects exactly 3 points on both GDS and SEM images
- Calculates affine transformation matrix from point correspondences
- Applies transformation with movement, rotation, and zoom
- Generates aligned GDS file with transformed coordinates
- Provides transformation preview before final application
- Enhanced validation with quality metrics and recommendations

Key Algorithms:
- Affine transformation from 3-point correspondences
- Feature detection and matching (ORB/SIFT/SURF)
- RANSAC outlier rejection for robust estimation
- Transform parameter decomposition from matrices
- Quality scoring based on transformation consistency
- Matrix condition number analysis for stability

Alignment Quality Metrics:
- Point transformation accuracy (RMS error)
- Feature matching confidence scores
- Transform matrix condition numbers
- Geometric consistency validation
- Scale uniformity assessment
- Rotation precision evaluation
- Translation magnitude validation

Validation and Quality Control:
- Enhanced transformation validation with detailed quality assessment
- Scale factor validation (no extreme distortions)
- Translation magnitude checking
- Rotation precision with 90-degree snapping
- Matrix stability analysis
- Point transformation accuracy assessment
- Comprehensive quality scoring with recommendations

Preview and Visualization:
- Transformation preview generation
- Overlay visualization creation
- Point transformation visualization
- Grid-based transformation effect display
- Quality indicator calculations
- User-friendly recommendation generation

Error Handling:
- Comprehensive exception handling for all operations
- Detailed error logging with context information
- Graceful fallbacks for missing or invalid data
- Parameter validation with descriptive error messages
- Signal-based error reporting for UI integration

Features:
- Rotation snapping to 90-degree increments for precision
- Transform validation to prevent extreme distortions
- Multi-algorithm support with automatic fallback
- Real-time preview capabilities
- Comprehensive error handling and recovery
- State persistence and restoration
- Progress reporting for long-running operations

───── C:\Users\tarik\Desktop\Image_analysis\src\services\simple_file_service.py ─────
Simple File Service - Core File Management System

This service provides comprehensive file management capabilities for the SEM/GDS alignment
application. It handles all file I/O operations with proper validation, error handling,
and progress reporting.

Main Class:
- FileService: Qt-based service for comprehensive file management operations

Key Methods:
- scan_data_directories(): Discovers available SEM and GDS files
- load_sem_file(): Loads and crops SEM images with validation
- load_gds_file(): Loads GDS files with structure extraction
- save_alignment_result(): Saves alignment data with timestamps
- save_filter_result(): Saves filter processing results
- save_scoring_result(): Saves scoring and analysis results
- get_file_info(): Returns basic file information
- save_file(): Generic file saving with format support
- load_file(): Generic file loading with format support
- add_recent_file(): Manages recent file history
- get_recent_files(): Returns recent files list
- set_data_directories(): Sets custom data directories
- save_aligned_gds(): Creates new GDS files with transformations
- test_initial_gds_loading(): Tests GDS loading workflow

Signals Emitted:
- files_scanned(list, list): Directory scanning completed
- file_loaded(str, str): Files successfully loaded
- loading_progress(str): Progress messages during loading
- loading_error(str): Loading operation failures
- file_saved(str, str): Files successfully saved
- error_occurred(str): General error notifications
- recent_files_changed(list): Recent files list updated

Dependencies:
- Uses: pathlib, json, csv (file operations)
- Uses: PIL/Pillow (image processing), numpy (array operations)
- Uses: PySide6.QtCore (QObject, Signal for Qt integration)
- Uses: pandas (optional, for enhanced CSV support)
- Uses: core/models (SemImage, GDS models)
- Uses: core/models/simple_gds_extraction (structure extraction)
- Uses: services/gds_transformation_service (GDS transformations)
- Called by: ui/file_handler.py, ui/file_operations.py
- Called by: services/file_loading_service.py

Directory Structure Management:
- Data/SEM/: SEM image files (TIFF, PNG)
- Data/GDS/: GDS layout files
- Results/Aligned/: Alignment results (manual/auto)
- Results/SEM_Filters/: Filter processing results
- Results/Scoring/: Analysis and scoring results with subdirectories
- Results/cut/: Cropped SEM images
- Automatic directory creation and validation

File Format Support:
- SEM: TIFF, PNG, JPG (automatically cropped to 1024x666)
- GDS: GDS, GDS2, GDSII (with structure validation)
- Results: JSON, CSV, TXT (with proper encoding)
- Image formats with PIL/Pillow support
- Fallback mechanisms for missing dependencies

SEM Image Processing:
- Automatic cropping to exactly 1024x666 pixels
- Bottom pixel removal (removes bottom 102 pixels from 768px height)
- Grayscale conversion for consistency
- Original and cropped image preservation
- Automatic saving of cropped images to Results/cut/
- Format validation and error handling

GDS File Processing:
- Structure extraction with predefined structure support
- Binary image generation from polygon data
- Layer filtering and bounds validation
- Metadata extraction (unit, precision, cell names)
- Integration with InitialGdsModel and extraction utilities
- Structure-specific processing (1-5 predefined structures)

Result Management:
- Organized directory structure for different result types
- Timestamp-based filename generation
- JSON serialization with proper encoding
- CSV export with pandas integration (optional)
- Alignment, filter, and scoring result separation
- Automatic subdirectory creation

Recent Files Management:
- Configurable maximum recent files (default 10)
- File type and path tracking
- Duplicate removal and ordering
- Signal emission for UI updates
- Persistence support for application sessions

Error Handling:
- Comprehensive exception handling for all operations
- User-friendly error messages with context
- Progress reporting for long-running operations
- Graceful fallbacks for missing dependencies
- Signal-based error reporting for UI integration

Binary Image Generation:
- Polygon-to-image conversion with coordinate transformation
- Configurable output dimensions (default 1024x666)
- Bounds validation and scaling calculations
- OpenCV integration for polygon filling
- Error recovery with empty image fallbacks

GDS Transformation Support:
- Integration with GdsTransformationService
- Aligned GDS file creation with applied transformations
- Coordinate system conversion and validation
- New GDS library creation with gdstk
- Transformation parameter extraction and application

Testing and Validation:
- Built-in testing methods for workflow validation
- Structure extraction testing
- Binary image validation
- File format and content verification
- Debug logging and error reporting

Compatibility Features:
- Backward compatibility methods for existing interfaces
- Stub methods for gradual migration
- Optional dependency handling (pandas)
- Multiple file format support with fallbacks
- Cross-platform path handling

Features:
- Automatic SEM image cropping to 1024x666 (removes bottom pixels)
- GDS structure validation against predefined definitions
- Comprehensive error handling with user-friendly messages
- Progress reporting for long operations
- File history management with configurable limits
- Organized result directory structure
- Multiple file format support with validation

───── C:\Users\tarik\Desktop\Image_analysis\src\services\simple_image_processing_service.py ─────
Simple Image Processing Service - Core Image Filter Management

This service provides comprehensive image processing capabilities for SEM images,
including filter application, preset management, and automatic filter selection.
It serves as the central hub for all image enhancement and processing operations.

Core Filter Registry :
- gaussian_blur: Noise reduction with configurable kernel size and sigma
- threshold: Binary thresholding with adjustable threshold values
- edge_detection: Canny edge detection with low/high threshold control
- median_filter: Noise reduction using median filtering
- clahe: Contrast Limited Adaptive Histogram Equalization

Filter Management Features:
- Parameter validation with min/max bounds checking
- Filter preview without permanent application
- Filter history tracking and undo capabilities
- Cascading filter application (filter chains)
- Real-time parameter adjustment

Preset System :
- Predefined filter combinations for common tasks
- Custom preset creation and management
- Preset categories: noise_reduction, edge_enhancement, segmentation
- JSON-based preset storage with metadata
- Preset sharing and import/export

Automatic Filter Selection:
- Image analysis for contrast, sharpness, and noise metrics
- Intelligent filter recommendation based on image characteristics
- Target-based optimization (contrast, sharpness, noise_reduction)
- Simple scoring system for filter effectiveness

Dependencies:
- Uses: cv2 (OpenCV for image processing)
- Uses: numpy (numerical operations)
- Uses: json, pathlib (preset management)
- Uses: PySide6.QtCore (signals and QObject)
- Called by: ui/image_processor.py, ui/image_processing.py
- Called by: services/workflow_service.py

Signals (Step 80):
- filter_applied: Emitted when filters are successfully applied
- filter_progress: Emitted during filter processing
- filter_error: Emitted when filter operations fail
- filter_previewed: Emitted when filter previews are generated
- preset_saved/loaded: Emitted for preset operations
- processing_started/finished: Emitted for operation lifecycle

Key Methods:
- apply_filter(): Core filter application with parameter validation
- preview_filter(): Generate filter previews without permanent changes
- save_preset()/load_preset(): Preset management operations
- auto_select_filters(): Intelligent filter recommendation
- get_available_filters(): List available filters with metadata

Filter Parameter Validation:
- Type checking (int, float, bounds)
- Range validation (min/max values)
- Parameter clamping for safety
- Default value fallbacks

Image Analysis Metrics:
- Contrast: Standard deviation of pixel intensities
- Sharpness: Laplacian variance for edge detection
- Noise: High-frequency content analysis
- Brightness: Mean pixel intensity

───── C:\Users\tarik\Desktop\Image_analysis\src\services\simple_scoring_service.py ─────
Simple Scoring Service - Comprehensive Image Comparison and Analysis (Implementation Steps 86-90)

This service provides advanced image comparison and scoring capabilities for evaluating
SEM/GDS alignment quality. It implements multiple complementary metrics to provide
comprehensive analysis of alignment accuracy and image similarity.

Scoring Metrics Registry (Step 86):
- simple_similarity: User-friendly combined score (0-100%) with quality classification
- pixel_match: Binary pixel comparison with overlap and accuracy metrics
- ssim: Structural Similarity Index for perceptual image comparison
- iou: Intersection over Union for shape overlap analysis
- correlation: Normalized cross-correlation coefficient
- mse: Mean Squared Error with normalized variants

Pixel Matching Analysis (Step 87):
- Binary image conversion with configurable thresholds
- Intersection and union calculations for overlap analysis
- Pixel-wise accuracy measurement
- Jaccard index and Dice coefficient computation
- Comprehensive overlap statistics

SSIM Analysis (Step 88):
- Structural similarity assessment using sliding windows
- Luminance, contrast, and structure comparison
- Full SSIM map generation for detailed analysis
- High-similarity region percentage calculation
- Statistical analysis of SSIM distribution

IoU Analysis (Step 89):
- Pure pixel-based approach (no contour dependencies)
- Bitwise operations for intersection/union calculation
- Connected component analysis for object counting
- Area ratio and coverage metrics
- Robust handling of different image formats

Simple Similarity Score:
- Weighted combination of multiple metrics
- SSIM (40%), IoU (30%), Pixel Accuracy (20%), Correlation (10%)
- Quality classification: Excellent (90%+), Very Good (80%+), Good (70%+)
- User-friendly percentage output with descriptive labels

Dependencies:
- Uses: numpy (numerical operations and array processing)
- Uses: cv2 (OpenCV for image processing operations)
- Uses: skimage.metrics (SSIM calculation)
- Uses: PySide6.QtCore (signals and QObject)
- Called by: ui/scoring_calculator.py, ui/alignment_controller.py
- Called by: services/workflow_service.py

Signals (Step 90):
- score_calculated: Emitted when individual metrics are computed
- scores_batch_calculated: Emitted when all metrics are computed
- scoring_started/finished: Emitted for operation lifecycle
- results_formatted: Emitted when results are formatted for display
- scoring_progress: Emitted for progress reporting

Result Formatting Options:
- Summary: Concise overview with main scores
- Detailed: Complete metric breakdown with all parameters
- CSV: Structured data format for analysis
- JSON: Machine-readable format for storage

Key Methods:
- calculate_metric(): Compute individual scoring metrics
- calculate_all_metrics(): Batch computation of all available metrics
- format_results(): Format results in various output formats
- set_images(): Configure images for comparison
- get_available_metrics(): List available scoring methods

Error Handling:
- Graceful degradation when metrics fail
- Image format validation and conversion
- Size mismatch handling with automatic resizing
- NaN and infinity value handling

Critical Features:
- No tuple unpacking to avoid Python version issues
- Pure pixel-based operations for maximum compatibility
- Comprehensive error handling with fallback mechanisms
- Multiple output formats for different use cases
- Real-time progress reporting for long operations

Scoring Workflow:
1. Images are validated and preprocessed
2. Multiple metrics are computed in parallel
3. Results are combined into comprehensive scores
4. Quality classifications are assigned
5. Results are formatted for display/storage

───── C:\Users\tarik\Desktop\Image_analysis\src\services\transformation_service.py ─────
Transformation Service - GDS Structure Transformation Operations

This service provides comprehensive transformation capabilities for GDS structures
including rotation, zoom, movement, and overlay generation with validation,
history tracking, and error handling.

Main Class:
- TransformationService: Qt-based service for GDS structure transformations

Key Methods:
- set_structure(): Sets current structure for transformation operations
- apply_transformations(): Applies rotation, zoom, and movement transformations
- apply_transform_dict(): Applies transformations using parameter dictionary
- get_current_transform(): Returns current transformation parameters
- reset_transforms(): Resets all transformations to default values
- rotate_structure(): Rotates structure to specified angle
- zoom_structure(): Zooms structure to specified percentage
- move_structure(): Moves structure by relative offset
- set_absolute_position(): Sets absolute position of structure
- get_structure_info(): Returns information about current structure
- create_overlay_image(): Creates colored overlay image
- undo_last_transform(): Undoes the last transformation
- get_transform_history(): Returns transformation history
- get_transform_summary(): Returns summary of transformation state

Signals Emitted:
- transformation_applied(np.ndarray): Transformation successfully applied
- transformation_error(str): Transformation operation failed

Dependencies:
- Uses: numpy (array operations), cv2 (OpenCV for image processing)
- Uses: PySide6.QtCore (QObject, Signal for Qt integration)
- Uses: core/gds_aligned_generator (aligned GDS generation)
- Uses: core/gds_display_generator (structure information)
- Used by: UI transformation controls and alignment interfaces
- Used by: Workflow services for automated transformations

Transformation Parameters:
- rotation: Rotation angle in degrees (-360 to 360)
- zoom: Zoom percentage (1% to 1000%)
- move_x: Horizontal movement in pixels
- move_y: Vertical movement in pixels
- target_size: Output image dimensions (default 1024x666)

Validation Features:
- Parameter type and range validation
- Reasonable bounds checking for all parameters
- Color format validation for overlays
- Structure existence verification
- Error reporting with descriptive messages

History and Undo:
- Transformation history tracking (configurable size limit)
- Undo functionality for last transformation
- History entry metadata (action type, timestamp, structure)
- Clear history and state management
- Last successful transformation tracking

Overlay Generation:
- Colored overlay creation with customizable colors
- Background and structure color configuration
- Binary mask generation for structure areas
- RGB overlay output for visualization
- Error handling for overlay operations

Error Handling:
- Comprehensive parameter validation
- Graceful error recovery with user feedback
- Signal-based error reporting for UI integration
- Detailed error messages with context
- Safe fallbacks for failed operations

State Management:
- Current structure tracking
- Base transformation parameter storage
- History management with size limits
- Last successful transformation caching
- Transform summary generation

Advanced Features:
- Relative and absolute positioning
- Transform parameter dictionary support
- History-based undo functionality
- Overlay generation with color customization
- Comprehensive state reporting

───── C:\Users\tarik\Desktop\Image_analysis\src\services\workflow_service.py ─────
Workflow Service - Coordinated SEM/GDS Processing Pipeline

This service coordinates SEM and GDS loading with sequential processing,
state management, and workflow orchestration. It provides a unified interface
for managing the complete image analysis pipeline from file loading to alignment.

Main Classes:
- WorkflowState: Enumeration of workflow states (IDLE, PROCESSING, READY, ERROR)
- WorkflowStep: Enumeration of workflow steps (LOAD_SEM, LOAD_GDS, etc.)
- WorkflowService: Main service for workflow coordination

Key Methods:
- load_sem_and_gds(): Coordinates loading of both SEM and GDS files
- process_workflow(): Processes sequence of workflow steps
- get_workflow_status(): Returns current workflow status and progress
- load_sem_image(): Loads SEM image file
- load_gds_file(): Loads GDS file
- generate_structure_images(): Generates structure images for alignment
- select_structure(): Selects structure for alignment operations
- get_structure_list(): Returns list of available structures
- is_ready_for_alignment(): Checks if workflow is ready for alignment
- get_current_data(): Returns current workflow data

Dependencies:
- Uses: pathlib.Path, time, enum (standard libraries)
- Uses: services/file_loading_service.FileLoadingService (file operations)
- Uses: services/gds_image_service.GDSImageService (GDS image generation)
- Uses: services/file_service.FileManager (file management)
- Uses: core/models.SemImage (SEM image data model)
- Uses: core/models/structure_definitions.get_default_structures (structure metadata)
- Used by: UI workflow controllers and main application
- Used by: Automated processing pipelines

Workflow States:
- IDLE: No active processing, ready to start
- PROCESSING: Currently executing workflow steps
- READY: Processing complete, ready for next operations
- ERROR: Error occurred during processing

Workflow Steps:
- LOAD_SEM: Load SEM image file
- LOAD_GDS: Load GDS layout file
- GENERATE_STRUCTURES: Generate structure images for alignment
- FILTER_PROCESSING: Apply image filters (planned)
- ALIGNMENT: Perform alignment operations (planned)
- SCORING: Calculate alignment scores (planned)

State Management:
- Current workflow state tracking
- Step-by-step progress monitoring
- Operation history with timestamps
- Error state handling and recovery
- Elapsed time tracking

Data Management:
- Current SEM image storage
- Current GDS data storage
- Generated structure images storage
- Workflow results accumulation
- Structure definitions integration

Coordination Features:
- Sequential step processing with error handling
- Automatic structure generation option
- Service integration and orchestration
- Status reporting and progress tracking
- History logging for debugging

Error Handling:
- Comprehensive exception handling for all operations
- Error state management with recovery
- Detailed error logging with context
- Graceful degradation on failures
- History tracking for error analysis

Status Reporting:
- Current state and step information
- Elapsed time calculation
- Data availability status
- Readiness checks for next operations
- Progress metrics and statistics

Integration:
- File loading service integration
- GDS image service coordination
- File manager utilization
- Structure definition management
- Service orchestration and coordination

Usage Pattern:
1. Create WorkflowService instance
2. Load SEM and GDS files using load_sem_and_gds()
3. Generate structure images automatically or manually
4. Check readiness for alignment operations
5. Process additional workflow steps as needed
6. Monitor status and handle errors appropriately

Advantages:
- Unified: Single interface for complete workflow
- Coordinated: Proper service integration and orchestration
- Robust: Comprehensive error handling and state management
- Flexible: Configurable workflow steps and parameters
- Traceable: Complete history and status reporting

───── C:\Users\tarik\Desktop\Image_analysis\src\services\__init__.py ─────
Services Package - Business Logic Layer

This package implements the business logic layer of the SEM/GDS alignment application.
Services act as intermediaries between the UI layer and the core data models,
handling complex operations and coordinating between different components.

Architecture Pattern:
UI Controllers -> Services -> Core Models

Service Categories:
1. File Services: Handle data loading, saving, and file management
   - file_service.py: Core file operations
   - file_loading_service.py: Specialized loading operations
   - file_listing_service.py: File discovery and listing

2. Processing Services: Handle image processing and transformations
   - simple_image_processing_service.py: Image filtering and enhancement
   - transformation_service.py: GDS transformation operations
   - overlay.py: Image overlay and composition

3. Alignment Services: Handle alignment algorithms and operations
   - simple_alignment_service.py: Manual and automatic alignment
   - manual_alignment_service.py: Manual alignment operations
   - auto_alignment_service.py: Automatic alignment algorithms

4. Analysis Services: Handle scoring and analysis
   - simple_scoring_service.py: Image comparison and scoring metrics

5. Workflow Services: High-level operation coordination
   - workflow_service.py: Orchestrates complex multi-step operations
   - new_gds_service.py: Modern GDS handling service

Common Patterns:
- Qt signals/slots for asynchronous communication
- Error handling and progress reporting
- State management and caching
- Service composition and dependency injection

Dependencies:
- Uses: core package (models and utilities)
- Called by: ui package (controllers and panels)
- Coordinates: Multiple core modules for complex operations

Data Flow:
1. UI triggers service operations
2. Services coordinate core model operations
3. Services emit signals for UI updates
4. Services handle errors and state management

───── C:\Users\tarik\Desktop\Image_analysis\src\services\Canvas\canvas_movement_service.py ─────
Canvas Movement Service - Image Canvas Panning and Movement Operations

This service handles panning and movement functionality for image canvases in
alignment views, providing smooth interactive navigation with position tracking
and bounds management.

Main Class:
- CanvasMovementService: Qt-based service for canvas panning operations

Key Methods:
- start_pan(): Initiates panning operation from starting point
- continue_pan(): Continues panning with current mouse position
- end_pan(): Ends current panning operation
- pan_by(): Pans canvas by specified delta values
- pan_to(): Pans to specific absolute position
- reset_position(): Resets canvas position to center
- get_position(): Returns current canvas position
- set_canvas_bounds(): Sets canvas boundaries for bounds checking
- get_canvas_bounds(): Returns current canvas boundaries
- is_panning(): Checks if currently in panning mode
- center_on_point(): Centers canvas on specific point

Signals Emitted:
- position_changed(float, float): Canvas position changed
- position_reset(): Position reset to center

Dependencies:
- Uses: PySide6.QtCore (QObject, Signal, QPointF for Qt integration)
- Uses: typing (type hints for method signatures)
- Used by: UI canvas components and image viewers
- Used by: Alignment interfaces requiring pan functionality

Features:
- Interactive panning with mouse drag operations
- Position tracking with coordinate management
- Canvas bounds configuration and validation
- Center positioning and point focusing
- Signal-based position change notifications
- State management for panning operations

───── C:\Users\tarik\Desktop\Image_analysis\src\services\Canvas\canvas_zoom_service.py ─────
Canvas Zoom Service - Image Canvas Zoom and Scale Operations

This service handles zoom functionality for image canvases in alignment views,
providing smooth zoom operations with level management, limits, and fit-to-canvas
capabilities.

Main Class:
- CanvasZoomService: Qt-based service for canvas zoom operations

Key Methods:
- set_zoom_level(): Sets zoom level directly with bounds checking
- zoom_in(): Zooms in by one step increment
- zoom_out(): Zooms out by one step increment
- zoom_to_fit(): Zooms to fit image in canvas
- zoom_actual_size(): Sets zoom to 100% (actual size)
- get_zoom_level(): Returns current zoom level
- get_zoom_percentage(): Returns zoom level as percentage
- set_zoom_limits(): Sets minimum and maximum zoom limits
- get_zoom_limits(): Returns current zoom limits

Signals Emitted:
- zoom_changed(float): Zoom level changed
- zoom_reset(): Zoom reset to fit

Dependencies:
- Uses: PySide6.QtCore (QObject, Signal for Qt integration)
- Uses: typing (type hints for method signatures)
- Used by: UI canvas components and image viewers
- Used by: Alignment interfaces requiring zoom functionality

Features:
- Configurable zoom limits (default 0.1x to 10x)
- Step-based zoom in/out operations
- Fit-to-canvas automatic zoom calculation
- Actual size (100%) zoom preset
- Percentage-based zoom reporting
- Signal-based zoom change notifications
- Bounds checking and limit enforcement

───── C:\Users\tarik\Desktop\Image_analysis\src\services\Canvas\__init__.py ─────
Canvas services for zoom and movement operations.

───── C:\Users\tarik\Desktop\Image_analysis\src\services\filters\enhanced_filter_service.py ─────
Enhanced Filter Service with Parameter System Integration

This module provides a comprehensive filter service that integrates dynamic parameter
discovery, validation, and filter application with Qt-based signal/slot communication.
It serves as the main interface for applying image filters with automatic parameter
validation and management.

Dependencies:
- PySide6.QtCore: For Qt signal/slot communication and QObject inheritance
- numpy: For image array processing
- importlib.util: For dynamic module loading
- FilterParameterStorage: For parameter definition storage and retrieval
- FilterDefinition, FilterParameter: Data classes for filter metadata

Main Classes:
- EnhancedFilterService: Main service class inheriting from QObject

Key Methods:
- __init__(): Initialize service with filters directory and parameter storage
- apply_filter(): Apply a single filter to an image with parameter validation
- apply_filter_chain(): Apply a sequence of filters to an image
- get_available_filters(): Return list of all available filter names
- get_filter_definition(): Get complete filter definition including parameters
- get_filter_parameters(): Get parameter definitions for a specific filter
- get_filters_by_category(): Get filters organized by category
- validate_parameters(): Validate filter parameters against definitions
- save_preset()/load_preset(): Save and load filter chains as presets
- refresh_filters(): Reload filter definitions from files
- get_filter_history(): Get history of applied filters
- search_filters(): Search filters by name or description

Signals:
- filter_applied: Emitted when a filter is successfully applied
- filter_error: Emitted when filter application fails
- preset_loaded: Emitted when a preset is loaded
- filters_updated: Emitted when filter definitions are refreshed

Features:
- Automatic parameter validation and type conversion
- Dynamic filter function loading from modules
- Filter chain processing with error handling
- Preset management for saving/loading filter combinations
- Search functionality for finding filters
- Comprehensive error handling and logging
- Signal-based communication for UI integration

───── C:\Users\tarik\Desktop\Image_analysis\src\services\filters\filter_manager.py ─────
Filter Manager - Image Filter Chain Management

This module provides a simple filter management system that allows chaining
multiple image filters together and applying them sequentially to images.
It serves as a coordinator for filter operations in the image processing pipeline.

Main Class:
- FilterManager: Manages a chain of image filters and applies them sequentially

Key Methods:
- add_filter(): Adds a filter to the processing chain
- remove_filter(): Removes a filter from the processing chain
- apply_filters(): Applies all filters in sequence to an input image

Dependencies:
- Used by: services/image_processing_service.py (filter chain management)
- Used by: ui/panels (filter configuration and application)
- Works with: Individual filter classes that implement apply() method

Features:
- Sequential filter application in order of addition
- Simple filter chain management (add/remove filters)
- Supports any filter object with an apply() method
- Maintains filter order for consistent processing
- Lightweight and extensible design

Usage Pattern:
1. Create FilterManager instance
2. Add desired filters using add_filter()
3. Apply entire filter chain using apply_filters(image)
4. Remove filters as needed using remove_filter()

Filter Interface:
- Each filter must implement an apply(image) method
- Filters should return the processed image
- Filters are applied in the order they were added

───── C:\Users\tarik\Desktop\Image_analysis\src\services\filters\filter_parameter_parser.py ─────
Filter Parameter Parser Service

This module provides AST-based parsing of Python filter files to automatically
extract parameter information for dynamic UI generation. It analyzes Python
source code to discover filter functions/classes and their parameters, creating
structured definitions that can be used for automatic UI generation.

Dependencies:
- ast: For Abstract Syntax Tree parsing of Python source code
- inspect: For runtime introspection of Python objects
- importlib.util: For dynamic module loading
- dataclasses: For structured data representation
- enum: For parameter type enumeration

Main Classes:
- ParameterType: Enum defining supported parameter types (int, float, bool, str, tuple, list)
- FilterParameter: Dataclass representing a single filter parameter with constraints
- FilterDefinition: Dataclass representing complete filter metadata
- FilterParameterParser: Main parser class for extracting filter information

Key Methods:
- parse_all_filters(): Parse all filter files in the specified directory
- get_filter_definition(): Get parsed definition for a specific filter
- get_filters_by_category(): Get filters organized by category
- get_all_categories(): Get all available filter categories
- export_filter_definitions(): Export parsed definitions to JSON

Internal Methods:
- _parse_filter_file(): Parse a single Python filter file
- _extract_filter_info(): Extract filter information from AST
- _create_filter_definition_from_function(): Create definition from function node
- _create_filter_definition_from_class(): Create definition from class node
- _create_parameter_from_arg(): Create parameter definition from function argument
- _infer_type_from_value(): Infer parameter type from default value
- _get_parameter_constraints(): Get parameter constraints based on name/type
- _determine_category(): Categorize filters based on name patterns

Features:
- Automatic parameter discovery from function signatures
- Type inference from default values
- Constraint generation based on parameter names
- Category assignment based on filter names
- Support for both function and class-based filters
- Comprehensive error handling for malformed files
- Export functionality for caching parsed definitions

───── C:\Users\tarik\Desktop\Image_analysis\src\services\filters\filter_parameter_storage.py ─────
Filter Parameter Storage Service

This module manages the storage, caching, and retrieval of filter parameter
definitions. It provides a persistent storage layer that caches parsed filter
definitions to avoid repeated parsing and offers comprehensive parameter
validation and management capabilities.

Dependencies:
- json: For JSON serialization/deserialization of cached data
- dataclasses.asdict: For converting dataclasses to dictionaries
- FilterParameterParser: For parsing filter files
- FilterDefinition, FilterParameter, ParameterType: Data classes and enums

Main Classes:
- FilterParameterStorage: Main storage and management class

Key Methods:
- initialize(): Initialize storage by loading from cache or parsing files
- get_filter_definition(): Retrieve filter definition by name
- get_all_filters(): Get all stored filter definitions
- get_filter_names(): Get list of all available filter names
- get_filters_by_category(): Get filters organized by category
- get_filter_parameters(): Get parameter definitions for a specific filter
- validate_filter_parameters(): Validate and normalize parameter values
- get_default_parameters(): Get default parameter values for a filter
- refresh_filters(): Re-parse all filter files and update cache
- search_filters(): Search filters by name, description, or category
- get_filter_statistics(): Get statistics about loaded filters

Internal Methods:
- _load_from_cache(): Load filter definitions from JSON cache file
- _save_to_cache(): Save filter definitions to JSON cache file
- _validate_parameter_value(): Validate a single parameter value

Features:
- JSON-based caching system for fast startup
- Comprehensive parameter validation with type conversion
- Range validation for numeric parameters
- Choice validation for enumerated parameters
- Automatic cache management and refresh capabilities
- Search functionality across filter metadata
- Statistical analysis of filter collections
- Error handling for corrupted cache files

───── C:\Users\tarik\Desktop\Image_analysis\src\services\filters\filter_service.py ─────
Filter Service - Basic Filter Management

This module provides a basic filter service for registering, applying, and managing
image filters. It serves as a simpler alternative to the enhanced filter service,
focusing on runtime filter registration and application with preset management.

Dependencies:
- PySide6.QtCore: For Qt signal/slot communication and QObject inheritance
- numpy: For image array processing
- typing: For type hints
- core.utils.get_logger: For logging functionality

Main Classes:
- FilterService: Basic filter service inheriting from QObject

Key Methods:
- register_filter(): Register a new filter function with default parameters
- apply_filter(): Apply a registered filter to an image
- apply_filter_chain(): Apply a sequence of filters to an image
- get_available_filters(): Get list of registered filter names
- get_filter_parameters(): Get current parameters for a filter
- set_filter_parameters(): Update parameters for a filter
- reset_filter_parameters(): Reset filter parameters to defaults
- save_preset(): Save a filter chain as a named preset
- load_preset(): Load a previously saved filter preset
- get_presets(): Get list of available preset names
- auto_optimize_filters(): Auto-optimize filter parameters (placeholder)
- get_filter_history(): Get history of applied filters
- clear_history(): Clear the filter application history

Signals:
- filter_applied: Emitted when a filter is successfully applied
- filter_error: Emitted when filter application fails
- preset_loaded: Emitted when a preset is loaded

Features:
- Runtime filter registration system
- Parameter management with current/default values
- Filter chain processing with error propagation
- Preset system for saving/loading filter combinations
- Filter application history tracking
- Signal-based communication for UI integration
- Basic auto-optimization framework (placeholder)
- Comprehensive error handling and logging

Note: This is a simpler service compared to EnhancedFilterService, designed for
cases where filters are registered at runtime rather than discovered from files.

───── C:\Users\tarik\Desktop\Image_analysis\src\services\filters\generate_histogram.py ─────
Generate Histogram - Image Histogram Generation Utility

This module provides histogram generation functionality for image analysis,
calculating pixel intensity distributions for visualization and analysis.

Main Function:
- generate_histogram(): Generates histogram of pixel intensities

Dependencies:
- Used by: Image processing and analysis components
- Used by: Filter services for histogram-based operations

Features:
- Configurable bin count for histogram resolution
- Pixel intensity distribution calculation
- Support for grayscale image analysis

───── C:\Users\tarik\Desktop\Image_analysis\src\services\filters\image_processing_service.py ─────
Image Processing Service - Advanced Filter Application and Management

This service provides comprehensive image processing capabilities with multiple
filters, preview functionality, history management, and parameter validation
for SEM image enhancement and analysis.

Main Class:
- ImageProcessingService: Service for advanced image filter operations

Key Methods:
- load_image(): Loads SEM image for processing
- preview_filter(): Previews filter without permanent application
- apply_filter(): Applies filter with history tracking
- reset_to_original(): Resets to original unprocessed image
- get_current_image(): Returns current processed image
- get_original_image(): Returns original unprocessed image
- get_available_filters(): Lists all available filters
- get_filter_parameters(): Returns filter parameter specifications
- undo(): Undoes last filter application

Available Filters:
- fft_highpass: FFT-based high-pass filtering
- gabor: Gabor filter for texture analysis
- laplacian: Laplacian edge detection
- threshold: Binary thresholding with multiple methods
- top_hat: Morphological top-hat transformation
- total_variation: Total variation denoising
- wavelet: Wavelet-based edge detection
- dog: Difference of Gaussians
- canny: Canny edge detection
- clahe: Contrast Limited Adaptive Histogram Equalization

Dependencies:
- Uses: numpy (array operations), cv2 (OpenCV image processing)
- Uses: importlib (dynamic module loading), copy.deepcopy (deep copying)
- Uses: typing (type hints), skimage.restoration (optional denoising)
- Uses: pywt (optional wavelet processing)
- Used by: UI image processing components
- Used by: Filter management and workflow services

Features:
- Dynamic filter module loading
- Parameter validation and specification
- History tracking with undo functionality
- Preview mode for non-destructive testing
- Comprehensive filter parameter management
- Error handling with fallback implementations

───── C:\Users\tarik\Desktop\Image_analysis\src\services\filters\__init__.py ─────
Filter services for image processing and enhancement.

───── C:\Users\tarik\Desktop\Image_analysis\src\services\scoring\iou_score_service.py ─────
IOU Score Service - Intersection-over-Union Metrics Computation

This service provides comprehensive Intersection-over-Union (IoU) metrics
computation for binary image comparison, including multi-threshold analysis,
class-wise metrics, visualization, and local region analysis.

Main Class:
- IOUScoreService: Qt-based service for IoU metrics computation

Key Methods:
- compute_iou(): Computes basic IoU between two binary images
- compute_multi_threshold_iou(): Tests multiple threshold values
- compute_class_wise_iou(): Computes IoU for each class separately
- create_iou_visualization(): Creates color-coded IoU visualization
- get_last_result(): Returns most recent IoU computation result
- compute_local_iou(): Computes IoU for local image regions

Signals Emitted:
- iou_computed(dict): IoU computation completed successfully
- iou_error(str): IoU computation failed with error

Dependencies:
- Uses: numpy (array operations), cv2 (OpenCV image processing)
- Uses: PySide6.QtCore (QObject, Signal for Qt integration)
- Uses: core/utils.get_logger (logging functionality)
- Used by: Scoring services and alignment evaluation
- Used by: UI components for metric display and visualization

Metrics Computed:
- IoU Score: Intersection over Union ratio (0-1)
- Dice Coefficient: 2 * intersection / (area1 + area2)
- Precision: True positives / (true positives + false positives)
- Recall: True positives / (true positives + false negatives)
- F1 Score: Harmonic mean of precision and recall
- Coverage Ratio: Union area / total image area

Features:
- Multi-threshold analysis for optimal threshold selection
- Class-wise IoU for foreground and background separately
- Local region analysis with configurable grid size
- Color-coded visualization generation
- Statistical analysis of local IoU distributions
- Comprehensive error handling and logging

───── C:\Users\tarik\Desktop\Image_analysis\src\services\scoring\pixel_score_service.py ─────
Pixel Score Service - Pixel-Level Overlap and Difference Analysis

This service provides comprehensive pixel-level analysis for image comparison,
including overlap metrics, difference calculations, and visualization generation
for SEM/GDS alignment evaluation.

Main Class:
- PixelScoreService: Qt-based service for pixel-level scoring operations

Key Methods:
- compute_pixel_overlap(): Computes pixel overlap between binary images
- compute_pixel_difference(): Computes pixel-wise differences between images
- create_difference_overlay(): Creates color-coded difference visualization
- get_last_result(): Returns most recent scoring result
- create_overlap_visualization(): Creates color-coded overlap visualization

Signals Emitted:
- score_computed(dict): Score computation completed successfully
- score_error(str): Score computation failed with error

Dependencies:
- Uses: numpy (array operations), cv2 (OpenCV image processing)
- Uses: PySide6.QtCore (QObject, Signal for Qt integration)
- Uses: core/utils.get_logger (logging functionality)
- Used by: Scoring services and alignment evaluation
- Used by: UI components for metric display and visualization

Overlap Metrics:
- Overlap Ratio: Intersection over Union (Jaccard index)
- Dice Score: 2 * intersection / (area1 + area2)
- Precision: True positives / predicted positives
- Recall: True positives / actual positives
- F1 Score: Harmonic mean of precision and recall
- Coverage ratios for both images

Difference Metrics:
- Mean Absolute Error (MAE)
- Mean Squared Error (MSE)
- Root Mean Squared Error (RMSE)
- Peak Signal-to-Noise Ratio (PSNR)
- Normalized error metrics
- Min/max difference values

Visualization Features:
- Color-coded difference overlays with configurable colormaps
- Overlap visualization with distinct colors for different regions
- Red: Image1 only, Blue: Image2 only, Green: Overlap
- White background for non-structure areas

───── C:\Users\tarik\Desktop\Image_analysis\src\services\scoring\scoring_service.py ─────
Scoring Service - Comprehensive Metrics Aggregation and Report Management

This service aggregates multiple scoring metrics from specialized services,
computes composite scores, and manages report generation and persistence
for SEM/GDS alignment evaluation.

Main Class:
- ScoringService: Qt-based service for comprehensive scoring operations

Key Methods:
- compute_full_score(): Computes all scoring metrics for image pair
- save_report(): Saves scoring results to JSON report files
- load_report(): Loads previously saved scoring reports
- get_last_result(): Returns most recent full scoring result
- create_summary_report(): Creates summary from multiple results

Signals Emitted:
- scoring_completed(dict): Full scoring computation completed
- report_saved(str): Report saved to specified path
- scoring_error(str): Scoring operation failed with error

Dependencies:
- Uses: json, datetime, pathlib.Path (standard libraries)
- Uses: numpy (array operations for statistics)
- Uses: PySide6.QtCore (QObject, Signal for Qt integration)
- Uses: scoring/pixel_score_service.PixelScoreService (pixel-level metrics)
- Uses: scoring/ssim_score_service.SSIMScoreService (SSIM metrics)
- Uses: scoring/iou_score_service.IOUScoreService (IoU metrics)
- Uses: core/utils (logging and path utilities)
- Used by: UI scoring components and workflow services
- Used by: Batch processing and analysis tools

Metrics Aggregated:
- Pixel Overlap: F1 score, precision, recall, dice coefficient
- Pixel Differences: MAE, MSE, RMSE, PSNR
- SSIM: Structural similarity with multi-scale variants
- IoU: Intersection over Union with multi-threshold analysis
- Local Statistics: Grid-based regional analysis

Composite Scoring:
- Weighted average of primary metrics
- Configurable weights (default: IoU 40%, SSIM 30%, Pixel F1 30%)
- Overall percentage score for user-friendly interpretation
- Component score breakdown for detailed analysis

Report Management:
- JSON-based report persistence
- Automatic filename generation with timestamps
- Metadata inclusion (timestamps, image names, alignment mode)
- Summary report generation from multiple results
- Statistical analysis across result sets

Configuration Options:
- Selective metric computation (enable/disable individual metrics)
- Threshold values for binary operations
- Window sizes for SSIM calculations
- Multi-scale and multi-threshold parameters
- Local analysis grid sizes

───── C:\Users\tarik\Desktop\Image_analysis\src\services\scoring\scoring_service_v2.py ─────
Scoring Service V2 - Advanced Image Comparison and Analysis

This service provides advanced scoring capabilities for SEM/GDS image comparison
with edge-based analysis, multi-scale evaluation, region-based scoring,
and comprehensive diagnostic tools.

Main Class:
- ScoringService: Advanced service for comprehensive image scoring

Key Methods:
- compute_score(): Computes comprehensive scores with edge and IoU analysis
- compute_score_with_legacy(): Includes legacy SSIM and MSE metrics
- compute_region_scores(): Computes scores for specific image regions
- compute_multi_scale_scores(): Multi-scale analysis at different resolutions
- set_edge_params(): Configures edge detection parameters
- set_binarization_params(): Configures binarization parameters
- get_score_summary(): Extracts numeric summary from results

Global Functions:
- create_scoring_service(): Factory function for service creation
- compute_alignment_score(): Quick composite score computation
- batch_score_images(): Batch processing for multiple image pairs

Dependencies:
- Uses: numpy, cv2 (OpenCV), warnings (standard libraries)
- Uses: skimage.metrics (SSIM, MSE), skimage.filters (edge detection)
- Uses: scipy.ndimage (distance transforms), scipy.spatial.distance (Hausdorff)
- Uses: core/models.SemImage, core/models.gds_model.GDSModel
- Used by: Advanced scoring workflows and batch processing
- Used by: Research and analysis tools requiring detailed metrics

Scoring Metrics:
- Edge Overlap: Intersection over Union of detected edges
- IoU: Intersection over Union of binary regions
- Edge Distance: Hausdorff distance between edge sets
- Chamfer Distance: Average distance between edge points
- Composite Score: Weighted combination of primary metrics
- Legacy SSIM: Structural similarity index
- Legacy MSE: Mean squared error

Edge Detection:
- Canny edge detection with configurable thresholds
- Sobel edge detection with Gaussian smoothing
- Binary edge detection for GDS overlays
- Configurable parameters for different image types

Binarization Methods:
- Otsu thresholding for automatic threshold selection
- Adaptive thresholding for varying illumination
- Manual thresholding with configurable values
- Gaussian smoothing preprocessing option

Diagnostic Features:
- Binary image visualization
- Overlap and difference maps
- Edge overlay visualization
- Distance map computation
- Multi-channel diagnostic outputs

Advanced Analysis:
- Region-based scoring for specific areas of interest
- Multi-scale analysis at different resolutions
- Batch processing capabilities
- Configurable scoring parameters
- Comprehensive error handling with warnings

───── C:\Users\tarik\Desktop\Image_analysis\src\services\scoring\ssim_score_service.py ─────
SSIM Score Service - Structural Similarity Index Metrics Computation

This service provides comprehensive Structural Similarity Index (SSIM) metrics
computation including standard SSIM, multi-scale SSIM, local statistics,
and visualization generation for image quality assessment.

Main Class:
- SSIMScoreService: Qt-based service for SSIM metrics computation

Key Methods:
- compute_ssim(): Computes standard SSIM between two images
- compute_multiscale_ssim(): Computes Multi-Scale SSIM (MS-SSIM)
- create_ssim_heatmap(): Creates color-coded SSIM visualization
- get_last_result(): Returns most recent SSIM computation result
- compute_local_ssim_statistics(): Computes SSIM statistics for local regions

Signals Emitted:
- ssim_computed(dict): SSIM computation completed successfully
- ssim_error(str): SSIM computation failed with error

Dependencies:
- Uses: numpy (array operations), cv2 (OpenCV image processing)
- Uses: PySide6.QtCore (QObject, Signal for Qt integration)
- Uses: skimage.metrics.structural_similarity (SSIM computation)
- Uses: core/utils.get_logger (logging functionality)
- Used by: Scoring services and image quality assessment
- Used by: UI components for metric display and visualization

SSIM Metrics:
- SSIM Score: Structural similarity index (-1 to 1, higher is better)
- SSIM Map: Pixel-wise SSIM values across the image
- MS-SSIM: Multi-scale SSIM with weighted combination
- Local SSIM Statistics: Regional analysis with grid-based computation

Visualization Features:
- SSIM heatmap generation with configurable colormaps
- Color-coded visualization of similarity patterns
- Statistical analysis of SSIM distributions
- Regional threshold analysis

Multi-Scale Analysis:
- Configurable scale factors (default: 1.0, 0.5, 0.25)
- Weighted combination of scales
- Automatic handling of minimum image sizes
- Individual scale result tracking

Local Statistics:
- Grid-based regional SSIM computation
- Statistical measures (mean, std, min, max, median)
- Threshold-based region counting
- Configurable grid sizes for analysis granularity

───── C:\Users\tarik\Desktop\Image_analysis\src\services\scoring\__init__.py ─────
Scoring services for computing various metrics between SEM and GDS images.

───── C:\Users\tarik\Desktop\Image_analysis\src\services\transformations\alignment_service.py ─────
Alignment Service - GDS Structure Alignment and Transformation Operations

This service provides comprehensive alignment capabilities for GDS structures
with SEM images, including transformations, batch processing, scoring,
and result visualization.

Main Class:
- AlignmentService: Service for GDS-to-SEM alignment operations

Key Methods:
- apply_transformations(): Applies transformations to single structure
- apply_transformations_all_structures(): Applies transformations to all structures
- batch_alignment_search(): Searches for optimal alignment parameters
- batch_alignment_search_all_structures(): Batch search for all structures
- save_alignment_result(): Saves alignment results to files

Global Functions:
- create_alignment_service(): Factory function for service creation
- align_gds_to_sem(): Quick alignment function for single structure

Dependencies:
- Uses: numpy, cv2 (OpenCV), pathlib.Path (standard libraries)
- Uses: skimage.metrics.structural_similarity (optional SSIM scoring)
- Uses: core/models.SemImage (SEM image data model)
- Used by: UI alignment components and workflow services
- Used by: Batch processing and automated alignment tools

Transformation Operations:
- Translation: X/Y offset in pixels
- Rotation: Angle in degrees (-180 to 180)
- Scaling: Scale factor (positive values)
- Transparency: Overlay transparency (0-100%)
- Combined transformation matrix computation

Alignment Scoring:
- SSIM-based structural similarity scoring
- Correlation-based fallback scoring
- Normalized score computation (0.0 to 1.0)
- Robust error handling for scoring failures

Batch Processing:
- Parameter range search for optimal alignment
- Multi-structure batch processing
- Configurable search ranges for all parameters
- Best parameter selection based on scoring

Visualization:
- Overlay preview generation with transparency
- Difference map computation
- Transformed GDS visualization
- Result saving to image files

───── C:\Users\tarik\Desktop\Image_analysis\src\services\transformations\auto_alignment_service.py ─────
Auto Alignment Service Module

This module provides automatic alignment functionality for GDS/SEM image pairs using various 
computer vision algorithms. It handles the complete auto-alignment workflow including feature 
detection, matching, transformation computation, and result application.

The service supports multiple alignment methods (ORB, SIFT, SURF) and provides both synchronous 
and asynchronous alignment operations with progress tracking. It integrates with Qt's threading 
system for non-blocking UI operations.

Dependencies:
    - typing: Type hints (Dict, Optional, Any, Callable)
    - PySide6.QtCore: Qt framework (QObject, Signal, QThread, QRunnable, QThreadPool)
    - numpy: Numerical operations and array handling
    - src.core.models: Data models (AlignedGdsModel, SemImage)

Classes:
    AutoAlignmentWorkerQt: Qt-compatible worker thread for alignment operations
        - __init__(): Initializes worker with image data and method
        - run(): Executes the alignment algorithm in separate thread

    AutoAlignmentService: Main service class for automatic alignment operations
        - initialize(): Sets up service with GDS model and SEM image
        - set_sem_image(): Updates the current SEM image for alignment
        - set_alignment_method(): Sets the alignment algorithm method
        - get_available_methods(): Returns list of supported alignment methods
        - start_auto_alignment(): Begins automatic alignment process
        - stop_auto_alignment(): Stops current alignment operation
        - apply_alignment_result(): Applies computed transformation to model
        - get_current_transform(): Returns current transformation parameters
        - reset_transforms(): Resets all transformations to defaults
        - get_current_state(): Returns complete service state information
        - set_canvas_size(): Updates rendering canvas dimensions
        - _on_alignment_progress(): Handles progress updates from worker
        - _on_alignment_completed(): Handles successful alignment completion
        - _on_alignment_failed(): Handles alignment failure
        - _cleanup_worker(): Cleans up worker thread resources
        - _extract_transforms_from_matrix(): Extracts transform parameters from matrix
        - _apply_transforms_to_model(): Applies transforms to GDS model
        - _render_and_emit(): Renders aligned result and emits bitmap
        - _emit_state_change(): Emits state change notifications

Signals:
    - alignment_started: Emitted when auto alignment begins
    - alignment_progress: Emitted with progress percentage and status
    - alignment_completed: Emitted when alignment completes with results
    - auto_alignment_completed: Emitted when auto alignment process finishes
    - alignment_failed: Emitted when alignment fails with error message
    - transform_updated: Emitted when transforms are applied
    - bitmap_rendered: Emitted when new bitmap is rendered
    - state_changed: Emitted when alignment state changes

Supported Alignment Methods:
    - ORB (Oriented FAST and Rotated BRIEF): Feature-based matching
    - SIFT (Scale-Invariant Feature Transform): Scale-invariant feature detection
    - SURF (Speeded Up Robust Features): Fast feature detection and description

Transform Parameters:
    - translate_x, translate_y: Translation offsets in pixels
    - rotation: Rotation angle in degrees
    - scale: Uniform scaling factor
    - transparency: Overlay transparency (0.0 to 1.0)

───── C:\Users\tarik\Desktop\Image_analysis\src\services\transformations\transform_move.py ─────
Transform Move - Translation Transformation Operations

This module provides translation (movement) transformation functionality
for image alignment operations, including validation, matrix generation,
and coordinate system conversion.

Main Class:
- TransformMove: Handles translation transformation operations

Key Methods:
- set_translation(): Sets translation values with validation
- get_translation(): Returns current translation values
- apply_translation(): Applies translation transformation to images
- get_translation_matrix(): Returns 3x3 transformation matrix
- reset_translation(): Resets translation to zero
- convert_pixels_to_units(): Converts pixel translation to coordinate units
- convert_units_to_pixels(): Converts coordinate translation to pixels

Dependencies:
- Uses: numpy (array operations), cv2 (OpenCV for image transformations)
- Uses: logging (error reporting and debugging)
- Used by: Transformation services and alignment operations
- Used by: UI transformation controls

Features:
- Translation validation with configurable limits
- 3x3 homogeneous transformation matrix generation
- Image transformation with OpenCV warpAffine
- Coordinate system conversion utilities
- Error handling and logging

───── C:\Users\tarik\Desktop\Image_analysis\src\services\transformations\transform_rotate.py ─────
Transform Rotate - Rotation Transformation Operations

This module provides rotation transformation functionality for image alignment
operations, including angle validation, matrix generation, snapping to 90-degree
increments, and residual rotation calculations.

Main Class:
- TransformRotate: Handles rotation transformation operations

Key Methods:
- set_rotation(): Sets rotation angle with optional 90-degree snapping
- get_rotation(): Returns current rotation angle
- apply_rotation(): Applies rotation transformation to images
- get_rotation_matrix(): Returns 3x3 transformation matrix with center
- get_rotation_matrix_simple(): Returns simple rotation matrix around origin
- reset_rotation(): Resets rotation to zero
- snap_to_nearest_90(): Snaps rotation to nearest 90-degree increment
- get_90_degree_component(): Returns 90-degree component of rotation
- get_residual_rotation(): Returns residual rotation after 90-degree removal

Dependencies:
- Uses: numpy, math (mathematical operations)
- Uses: cv2 (OpenCV for image transformations)
- Uses: logging (error reporting and debugging)
- Used by: Transformation services and alignment operations
- Used by: UI rotation controls

Features:
- Rotation validation with finite value checking
- Optional snapping to 90-degree increments
- 3x3 homogeneous transformation matrix generation
- Image rotation with configurable center point
- Residual rotation calculation for fine adjustments
- Angle normalization and component separation

───── C:\Users\tarik\Desktop\Image_analysis\src\services\transformations\transform_service.py ─────
Transform Service - Transformation Operations Coordination

This service coordinates transformation operations between UI components and
core transformation utilities, providing a Qt-based interface with signal
emission and state management.

Main Class:
- TransformService: Qt-based service for transformation coordination

Key Methods:
- apply_translation(): Applies translation transformation with validation
- apply_rotation(): Applies rotation transformation with validation
- apply_scale(): Applies scale transformation with validation
- get_transformation_matrix(): Returns current 3x3 transformation matrix
- reset_transforms(): Resets all transformations to identity
- get_current_transforms(): Returns current transformation parameters
- convert_pixels_to_gds(): Converts pixel coordinates to GDS units
- convert_gds_to_pixels(): Converts GDS coordinates to pixel units
- apply_transform_from_dict(): Applies transformations from parameter dictionary

Signals Emitted:
- transform_applied(dict): Transformation successfully applied
- transform_updated(str, float): Individual transformation parameter updated
- transform_error(str): Transformation operation failed

Dependencies:
- Uses: PySide6.QtCore (QObject, Signal for Qt integration)
- Uses: logging (error reporting and debugging)
- Uses: utils/transformations (core transformation utilities)
- Used by: UI transformation controls and alignment interfaces
- Used by: Workflow services requiring transformation operations

Features:
- Parameter validation using transformation utilities
- State management with current transformation tracking
- History tracking for transformation operations
- Signal-based communication with UI components
- Coordinate system conversion utilities
- Error handling with user-friendly messages

Transformation State:
- Translation X/Y in pixels
- Rotation angle in degrees
- Scale factor (positive values)
- Transformation matrix generation
- History tracking for undo operations

───── C:\Users\tarik\Desktop\Image_analysis\src\services\transformations\transform_transparency.py ─────
Transform Transparency - Transparency and Opacity Operations

This module provides transparency and opacity transformation functionality
for image blending, overlay operations, and visual composition in alignment
visualization.

Main Class:
- TransformTransparency: Handles transparency and opacity transformations

Key Methods:
- set_transparency(): Sets transparency percentage (0-100)
- set_opacity(): Sets opacity value (0.0-1.0)
- get_transparency(): Returns current transparency percentage
- get_opacity(): Returns current opacity value
- apply_transparency(): Blends two images with transparency
- apply_overlay(): Applies overlay with transparency
- create_color_overlay(): Creates colored overlay on image
- reset_transparency(): Resets to 50% transparency
- make_opaque(): Sets to fully opaque
- make_transparent(): Sets to fully transparent

Dependencies:
- Uses: numpy (array operations), cv2 (OpenCV for image resizing)
- Uses: logging (error reporting and debugging)
- Used by: Transformation services and visualization components
- Used by: UI overlay and blending operations

Features:
- Dual transparency/opacity representation
- Image normalization for consistent blending
- Alpha blending with configurable transparency
- Color overlay generation
- Validation with range checking
- Error handling and logging

───── C:\Users\tarik\Desktop\Image_analysis\src\services\transformations\transform_zoom.py ─────
Transform Zoom - Scaling Transformation Operations

This module provides scaling (zoom) transformation functionality for image
resizing operations, including validation, matrix generation, and fit-to-bounds
calculations.

Main Class:
- TransformZoom: Handles scaling transformation operations

Key Methods:
- set_scale(): Sets scaling factor with optional center point
- get_scale(): Returns current scaling factor
- apply_zoom(): Applies zoom transformation to images
- get_zoom_matrix(): Returns 3x3 transformation matrix with center
- get_zoom_matrix_simple(): Returns simple scaling matrix around origin
- reset_zoom(): Resets scaling to 1.0 (no scaling)
- zoom_in(): Zooms in by specified factor
- zoom_out(): Zooms out by specified factor
- fit_to_bounds(): Calculates scale to fit image within bounds

Dependencies:
- Uses: numpy (array operations), cv2 (OpenCV for image transformations)
- Uses: logging (error reporting and debugging)
- Used by: Transformation services and zoom operations
- Used by: UI zoom controls and fit-to-window functionality

Features:
- Scale validation with configurable limits
- Configurable scaling center point
- 3x3 homogeneous transformation matrix generation
- Image scaling with OpenCV warpAffine
- Zoom in/out operations with default factors
- Fit-to-bounds calculation for window sizing
- Error handling and logging

───── C:\Users\tarik\Desktop\Image_analysis\src\services\transformations\__init__.py ─────
Transformations package for coordinate and geometric transformations.

This package is maintained for compatibility with existing imports.
For new development, use src.utils.transformations for pure mathematical operations.

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\alignment_controller.py ─────
Alignment Controller - Central Alignment Operation Coordinator

This controller orchestrates all alignment operations between SEM and GDS images,
coordinating UI components, alignment services, and transformation operations.

Main Class:
- AlignmentController: Qt-based controller for alignment operations

Key Methods:
- auto_align(): Performs automatic feature-based alignment
- manual_align_3_point(): Handles 3-point manual alignment
- apply_transformation(): Applies custom transformation matrices
- reset_alignment(): Resets to original unaligned state
- update_alignment_display(): Updates UI with alignment results
- export_alignment_result(): Exports alignment data to file
- load_alignment_result(): Loads alignment data from file

Signals Emitted:
- alignment_completed(object): Alignment operations completed
- alignment_reset(): Alignment reset to original state
- transformation_applied(object): Transformation applied
- alignment_progress(str): Progress reporting

Dependencies:
- Uses: services/simple_alignment_service.AlignmentService
- Uses: services/transformation_service.TransformationService
- Uses: cv2, numpy (image processing and matrix operations)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt integration)
- Called by: ui/main_window.py (main application controller)
- Coordinates with: UI panels and image viewers

Alignment Methods:
- Automatic: Feature-based matching with parameter optimization
- Manual 3-Point: User-selected point correspondences
- Custom Transformation: Direct matrix application

State Management:
- Current alignment result and transformation matrix
- Manual alignment point pairs
- Complete operation history
- Validation and error handling

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\alignment_operations.py ─────
Alignment Operations - Alignment Operation Management

This module handles all alignment operations, transformations, and alignment-related
functionality for SEM/GDS image alignment workflows.

Main Class:
- AlignmentOperations: Qt-based handler for alignment operations

Key Methods:
- auto_align(): Performs automatic alignment between SEM and GDS images
- manual_align_3_point(): Handles manual 3-point alignment operations
- apply_transformation(): Applies custom transformation matrices
- reset_alignment(): Resets alignment to original state
- update_alignment_display(): Updates UI alignment displays
- export_alignment_result(): Exports alignment results to file
- get_alignment_info(): Returns current alignment information
- is_aligned(): Checks if alignment has been performed
- get_transformation_matrix(): Returns current transformation matrix

Signals Emitted:
- alignment_completed(object): Alignment operation completed
- alignment_reset(): Alignment reset to original state
- transformation_applied(object): Transformation applied successfully

Dependencies:
- Uses: cv2, numpy (image processing and matrix operations)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt integration)
- Uses: services/simple_alignment_service.AlignmentService
- Uses: services/transformation_service.TransformationService
- Used by: UI alignment components and main window
- Coordinates with: Image viewers and alignment panels

Features:
- Automatic and manual alignment workflows
- Transformation matrix management
- Alignment state tracking and validation
- Error handling with user feedback
- Result export and information retrieval

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\base_panels.py ─────
Base Panel Classes - Foundation for View-Specific UI Panels

This module provides foundational base classes for all view-specific panels,
establishing consistent patterns for panel behavior, signal communication,
and view management across different application modes.

Main Classes:
- BaseViewPanel: Foundation for all view-specific panels
- BaseLeftPanel: Specialized for control panels (left side)
- BaseRightPanel: Specialized for information panels (right side)
- ViewPanelManager: Coordinates panel switching and management

Key Methods:
- BaseViewPanel: init_panel(), update_panel_data(), reset_panel(), get_panel_data()
- BaseLeftPanel: setup_modes(), add_mode(), switch_mode(), get_current_mode()
- BaseRightPanel: setup_display_sections(), add_display_section(), update_display_section()
- ViewPanelManager: register_left_panel(), register_right_panel(), switch_to_view()

Signals Emitted:
- panel_data_changed(dict): Panel data modified
- action_requested(str, dict): User actions triggered
- panels_switched(ViewMode, ViewMode): View modes changed
- panel_ready(ViewMode, str): Panels initialized

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: ui/view_manager.ViewMode (view mode enumeration)
- Called by: ui/main_window.py (panel integration)
- Inherited by: ui/panels/* (specific panel implementations)

View Modes:
- ALIGNMENT: Manual and automatic alignment operations
- FILTERING: Image processing and enhancement
- SCORING: Analysis and comparison metrics

Features:
- Enhanced error handling for missing panel modules
- Graceful fallback to placeholder panels
- Flexible panel architecture supporting tabbed interfaces
- Automatic signal connection and routing
- Comprehensive state management

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\file_handler.py ─────
File Handler - Comprehensive File Operation Manager

This module provides a high-level interface for all file operations,
acting as a bridge between the UI and file services, handling user
interactions and coordinating complex file operations.

Main Class:
- FileHandler: Qt-based handler for all file operations

Key Methods:
- load_sem_image(): Handles SEM image loading workflow
- load_gds_file(): Manages GDS file loading process
- save_results(): Compiles and saves analysis results
- save_current_image(): Exports processed images
- export_alignment_overlay(): Saves alignment visualizations
- get_current_file_info(): Returns information about loaded files
- clear_file_data(): Clears all loaded file data

Signals Emitted:
- sem_image_loaded(object, str): SEM image loaded successfully
- gds_file_loaded(str): GDS file loaded successfully
- results_saved(str): Analysis results saved

Dependencies:
- Uses: services/simple_file_service.FileService (core file operations)
- Uses: core/models.SemImage (SEM image data model)
- Uses: PySide6.QtWidgets (file dialogs and UI integration)
- Uses: cv2, numpy (image processing and file operations)
- Called by: ui/main_window.py (menu actions and toolbar)
- Coordinates with: UI components for display updates

File Format Support:
- SEM Images: TIFF, PNG, JPG, JPEG, BMP
- GDS Files: GDS, GDS2
- Results: JSON (analysis data), PNG (images)

Features:
- File dialog integration for user selection
- Automatic image validation and format checking
- Analysis result compilation and organization
- Error handling with user-friendly dialogs
- Status bar updates during operations

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\file_operations.py ─────
File Operations - File Loading, Saving, and Management Operations

This module handles all file operations including SEM image loading,
GDS file loading, result saving, and file management workflows.

Main Class:
- FileOperations: Handler for all file operations

Key Methods:
- load_sem_image(): Loads SEM image, crops to 1024x666, and saves to cut folder
- load_gds_file(): Loads GDS file and populates structure selection
- populate_structure_combo(): Populates structure selection combo box
- auto_load_default_gds(): Auto-loads default GDS file if available
- save_results(): Saves alignment and scoring results
- save_aligned_gds(): Saves aligned GDS structure

Dependencies:
- Uses: cv2, numpy (image processing)
- Uses: pathlib.Path, PIL.Image (file operations)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt integration)
- Uses: core/simple_gds_loader.SimpleGDSLoader (GDS loading)
- Called by: ui/main_window.py (file menu actions)
- Coordinates with: File services and GDS operations

Features:
- Automatic SEM image cropping to standard size (1024x666)
- GDS file loading with structure enumeration
- Result compilation and saving
- Default GDS file auto-loading
- Error handling with user dialogs
- Status bar updates during operations

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\gds_manager.py ─────
GDS Manager - Comprehensive GDS File and Structure Management

This module provides centralized management for all GDS-related operations,
handling GDS file loading, structure selection, overlay generation, and
coordination between UI and GDS services.

Main Class:
- GDSManager: Qt-based handler for GDS operations

Key Methods:
- load_gds_file(): Loads GDS files with validation
- populate_structure_combo(): Updates structure selection UI
- on_structure_selected(): Handles structure selection events
- auto_load_default_gds(): Automatically loads default files
- get_current_structure_info(): Provides structure metadata
- reset_structure_selection(): Resets structure selection
- is_gds_loaded(): Checks if GDS file is loaded
- is_structure_selected(): Checks if structure is selected
- get_available_structures(): Returns list of available structures
- export_structure_overlay(): Exports structure overlay as image

Signals Emitted:
- gds_file_loaded(str): GDS file successfully loaded
- structure_selected(str, object): Structure selected and overlay generated
- structure_combo_updated(list): Structure list refreshed

Dependencies:
- Uses: services/new_gds_service.NewGDSService (modern GDS processing)
- Uses: core/simple_gds_loader.SimpleGDSLoader (fallback GDS loading)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt integration)
- Called by: ui/main_window.py (structure selection events)
- Coordinates with: UI components for display and alignment

Features:
- GDS file loading and validation
- Structure selection and overlay generation
- Canvas size adaptation based on SEM images
- Real-time structure visualization
- Export capabilities for structure overlays
- Error handling with user-friendly messages

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\gds_operations.py ─────
GDS Operations - GDS File Operations and Structure Management

This module handles all GDS file operations, structure loading, and GDS-related
functionality for the SEM/GDS alignment application.

Main Class:
- GDSOperations: Qt-based handler for GDS operations

Key Methods:
- populate_structure_combo(): Populates structure selection combo box
- load_gds_file(): Loads GDS file with file dialog
- on_structure_selected(): Handles structure selection events
- get_current_structure_info(): Returns current structure information
- reset_structure_selection(): Resets structure selection
- is_gds_loaded(): Checks if GDS file is loaded
- is_structure_selected(): Checks if structure is selected

Signals Emitted:
- gds_loaded(str): GDS file loaded successfully
- structure_loaded(str, object): Structure loaded and overlay generated

Dependencies:
- Uses: services/new_gds_service.NewGDSService (modern GDS processing)
- Uses: core/simple_gds_loader.SimpleGDSLoader (fallback GDS loading)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt integration)
- Called by: ui/main_window.py (GDS operations)
- Coordinates with: UI components for display updates

Features:
- GDS file loading with validation
- Structure selection and overlay generation
- Canvas size adaptation based on SEM images
- Auto-loading of default GDS files
- Error handling with user dialogs
- State management for current GDS and structure

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\help_dialog.py ─────
Help Dialog - Application Help and User Guide Display

This module provides a help dialog that displays user guidance and instructions
for using the SEM/GDS alignment application.

Main Class:
- HelpDialog: Qt dialog for displaying help content

Key Features:
- HTML-formatted help content display
- Instructions for all major application features
- User-friendly dialog interface
- Integration with main application help menu

Dependencies:
- Uses: PySide6.QtWidgets (QDialog, QVBoxLayout, QTextBrowser, QDialogButtonBox)
- Called by: ui/main_window.py (help menu action)

Help Content:
- SEM image loading instructions
- GDS file loading instructions
- Mode switcher usage
- Filter panel operations
- Alignment panel operations
- Score panel usage
- Processing pipeline instructions
- Settings and export guidance

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\image_processing.py ─────
Image Processing - SEM Image Enhancement and Filtering

This module provides image processing capabilities for SEM images, including
filter application, enhancement operations, and processing workflow management.

Main Class:
- ImageProcessing: Qt-based handler for image processing operations

Key Methods:
- set_original_image(): Sets original SEM image for processing
- on_filter_applied(): Handles filter application from UI panels
- on_filter_preview(): Generates real-time filter previews
- on_reset_filters(): Resets all processing to original image
- apply_custom_filter(): Applies user-defined filter functions
- create_filter_chain(): Processes multiple filters in sequence
- get_image_statistics(): Returns current image statistics
- get_applied_filters(): Returns list of applied filters
- export_filtered_image(): Exports processed image to file

Signals Emitted:
- filter_applied(str, dict): Filter successfully applied
- filter_preview_ready(str, dict, object): Filter preview generated
- filters_reset(): All filters reset to original

Dependencies:
- Uses: services/simple_image_processing_service.ImageProcessingService
- Uses: cv2, numpy (image processing operations)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt integration)
- Called by: ui/main_window.py (filter panel interactions)
- Coordinates with: UI components for display updates

Features:
- Real-time filter application with visual feedback
- Filter preview generation without permanent changes
- Filter history tracking and reset capabilities
- Sequential filter chain processing
- Image statistics and analysis
- Export capabilities for processed images
- Error handling with user dialogs

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\image_processor.py ─────
Image Processor - Advanced Image Processing Operations

This module handles all image processing operations including filtering,
enhancement, transformations, and processing workflow management.

Main Class:
- ImageProcessor: Qt-based handler for advanced image processing

Key Methods:
- set_original_image(): Sets original SEM image for processing
- on_filter_applied(): Handles filter application from UI panels
- on_filter_preview(): Generates real-time filter previews
- on_reset_filters(): Resets all processing to original image
- apply_custom_filter(): Applies user-defined filter functions
- apply_enhancement(): Applies image enhancement operations
- create_filter_chain(): Processes multiple filters in sequence
- get_image_statistics(): Returns current image statistics
- get_applied_filters(): Returns list of applied filters
- get_filter_history(): Returns complete filter history
- export_processed_image(): Exports processed image to file
- compare_original_processed(): Creates side-by-side comparison
- undo_last_filter(): Undoes last applied filter

Signals Emitted:
- filter_applied(str, dict): Filter successfully applied
- filter_preview_ready(str, dict, object): Filter preview generated
- filters_reset(): All filters reset to original
- image_processed(object): Image processing completed

Dependencies:
- Uses: services/simple_image_processing_service.ImageProcessingService
- Uses: cv2, numpy (image processing operations)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt integration)
- Called by: ui/main_window.py (image processing operations)
- Coordinates with: UI components for display updates

Features:
- Advanced filter application with history tracking
- Real-time filter preview generation
- Image enhancement operations (contrast, sharpen, denoise)
- Sequential filter chain processing
- Undo functionality for filter operations
- Image statistics and comparison tools
- Export capabilities for processed images
- Error handling with user dialogs

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\main_window.py ─────
Main Window - Unified Image Analysis Application

This is the primary main window that combines all functionality for SEM/GDS
image analysis, alignment, filtering, and scoring operations.

Main Class:
- MainWindow: Primary application window with tabbed interface

Key Features:
- Core SEM/GDS alignment functionality
- Advanced filtering capabilities
- Sequential filtering workflow
- Comprehensive scoring system
- Hybrid alignment with 3-point selection
- File operations and management
- Real-time image processing and preview

Main Methods:
- load_sem_file(): Loads SEM image files
- load_gds_file(): Loads GDS files with structure selection
- run_auto_alignment(): Executes automatic alignment
- save_results(): Saves analysis results
- Various signal handlers for UI interactions

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: cv2, numpy (image processing)
- Uses: services/* (core processing services)
- Uses: ui/components/* (UI components)
- Uses: ui/managers/* (operation managers)
- Uses: ui/panels/* (UI panels)

UI Structure:
- Left Panel: Tabbed interface (Alignment, Filtering, Scoring)
- Center: Image viewer with overlay capabilities
- Right Panel: File selector and histogram view
- Menu Bar: File, View, Tools, Help menus
- Status Bar: Operation status and progress

Entry Point:
- main(): Application entry point function

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\scoring_calculator.py ─────
Scoring Calculator - Comprehensive Metrics Calculation and Evaluation

This module handles all scoring operations, metrics calculation, and evaluation
functionality for SEM/GDS alignment assessment.

Main Class:
- ScoringCalculator: Qt-based handler for scoring operations

Key Methods:
- calculate_scores(): Calculates comprehensive alignment scores
- batch_scoring(): Performs batch scoring on multiple image pairs
- set_scoring_method(): Sets primary scoring method
- get_current_scores(): Returns current scoring results
- export_scores(): Exports scoring results to file
- compare_scoring_methods(): Compares all scoring methods
- get_best_score(): Returns best score from current results

Signals Emitted:
- scores_calculated(dict): Scoring results calculated
- batch_scoring_completed(list): Batch scoring completed
- scoring_progress(str): Progress message during operations

Dependencies:
- Uses: cv2, numpy (image processing and calculations)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt integration)
- Uses: skimage.metrics (SSIM, MSE calculations)
- Uses: services/simple_scoring_service.ScoringService
- Called by: ui/main_window.py (scoring operations)
- Coordinates with: UI scoring components

Scoring Methods:
- SSIM: Structural Similarity Index
- MSE: Mean Squared Error
- PSNR: Peak Signal-to-Noise Ratio
- Cross-Correlation: Template matching correlation
- Mutual Information: Information theory metric
- Edge Overlap: Edge detection overlap analysis

Features:
- Comprehensive multi-metric scoring
- Batch processing capabilities
- Scoring history tracking
- Export functionality with context information
- Method comparison and analysis
- Error handling with user feedback

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\scoring_operations.py ─────
Scoring Operations - Scoring Operations and Metrics Management

This module handles all scoring operations, metrics calculation, and
scoring-related functionality for SEM/GDS alignment evaluation.

Main Class:
- ScoringOperations: Qt-based handler for scoring operations

Key Methods:
- calculate_scores(): Calculates alignment scores using current method
- calculate_all_scores(): Calculates scores using all available methods
- set_scoring_method(): Sets current scoring method
- get_current_scores(): Returns current scoring results
- calculate_custom_score(): Calculates custom scoring metric
- batch_scoring(): Performs batch scoring on multiple image pairs
- export_scores(): Exports scoring results to file
- compare_scoring_methods(): Compares all scoring methods

Signals Emitted:
- scores_calculated(dict): Scoring results calculated
- batch_scoring_completed(list): Batch scoring completed

Dependencies:
- Uses: cv2, numpy (image processing and calculations)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt integration)
- Uses: skimage.metrics (SSIM, MSE calculations)
- Uses: services/simple_scoring_service.ScoringService
- Called by: ui/main_window.py (scoring operations)
- Coordinates with: UI scoring components

Scoring Methods:
- SSIM: Structural Similarity Index
- MSE: Mean Squared Error
- PSNR: Peak Signal-to-Noise Ratio
- Cross-Correlation: Template matching correlation
- Mutual Information: Information theory metric

Features:
- Multiple scoring method support
- Batch processing capabilities
- Custom metric calculation
- Export functionality with image data
- Method comparison and analysis
- Error handling with user feedback

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\settings_dialog.py ─────
Settings Dialog - Application Settings Management

This module provides a settings dialog for managing application preferences
and configuration options.

Main Class:
- SettingsDialog: Qt dialog for application settings

Global Functions:
- load_app_settings(): Loads settings from file
- save_app_settings(): Saves settings to file

Key Methods:
- get_settings(): Returns current settings values

Dependencies:
- Uses: PySide6.QtWidgets (Qt dialog components)
- Uses: json, os (file operations)
- Called by: ui/main_window.py (settings menu)

Settings:
- Default Directory: Default file directory
- Dark Theme: Enable/disable dark theme

Features:
- Persistent settings storage
- User-friendly dialog interface
- JSON-based configuration file
- Cross-platform settings location

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\signal_handlers.py ─────
Signal Handlers - Centralized Signal Connection and Event Management

This module handles all signal connections and event handlers for the main window,
providing centralized signal management and event dispatching.

Main Class:
- SignalHandlers: Qt-based handler for signal connections and events

Key Methods:
- connect_all_signals(): Connects all application signals
- disconnect_all_signals(): Disconnects all signals for cleanup
- reconnect_specific_signals(): Reconnects signals for specific module
- Various signal handler methods for different operations

Dependencies:
- Uses: PySide6.QtCore, PySide6.QtWidgets (Qt integration)
- Called by: ui/main_window.py (signal management)
- Coordinates with: All UI modules and services

Signal Categories:
- UI Signals: User interface interactions
- File Operation Signals: File loading and saving events
- GDS Operation Signals: GDS file and structure events
- Image Processing Signals: Filter and processing events
- Alignment Operation Signals: Alignment and transformation events
- Scoring Operation Signals: Scoring calculation events
- View Controller Signals: View switching and panel events

Features:
- Centralized signal management
- Modular signal connection by category
- Error handling for signal operations
- Signal reconnection capabilities
- Event dispatching and coordination

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\view_controller.py ─────
View Controller - View Management and UI State Coordination

This module handles view management, panel switching, and UI state coordination
for the main application interface.

Main Class:
- ViewController: Qt-based controller for view management

Key Methods:
- setup_view_toolbar(): Creates view selection toolbar
- switch_view(): Switches to different view mode
- update_view_availability(): Updates view button availability
- switch_to_best_available_view(): Switches to best available view
- refresh_current_view(): Refreshes current view content
- initialize_view_system(): Initializes complete view system

Signals Emitted:
- view_changed(str, str): View changed from old to new
- panel_updated(str, object): Panel updated with data

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore, PySide6.QtGui (Qt framework)
- Uses: ui/view_manager.ViewManager, ViewMode (view management)
- Called by: ui/main_window.py (view operations)
- Coordinates with: UI panels and view components

View Modes:
- ALIGNMENT: Align SEM and GDS images
- FILTERING: Apply image filters
- SCORING: Calculate alignment scores

Features:
- View toolbar with exclusive button selection
- Keyboard shortcuts for view switching
- View availability checking based on application state
- Dynamic view content setup and clearing
- Error handling for view operations

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\view_manager.py ─────
View Manager - Application View Mode Management and State Coordination

This module handles view switching between Alignment, Filtering, and Scoring modes,
coordinating main application views and managing state transitions between
different operational modes.

Main Classes:
- ViewMode: Enumeration of available view modes
- ViewManager: Qt-based manager for view switching and state coordination

Key Methods:
- switch_to_view(): Switches to specified view mode
- get_view_data(): Gets data for specified view mode
- update_view_data(): Updates data for specified view mode
- set_view_data(): Sets specific data value for view mode
- reset_view_data(): Resets view data to defaults
- mark_view_initialized(): Marks view as initialized

Signals Emitted:
- view_changed(ViewMode, ViewMode): View changed from old to new
- view_ready(ViewMode): View fully loaded and ready
- view_data_updated(ViewMode, dict): View-specific data updated

Dependencies:
- Uses: enum.Enum (view mode enumeration)
- Uses: PySide6.QtCore, PySide6.QtWidgets (Qt framework)
- Called by: ui/view_controller.py (view management)
- Used by: UI components requiring view state information

View Modes:
- ALIGNMENT: Manual and 3-point alignment operations
- FILTERING: Image processing and enhancement
- SCORING: Analysis and comparison metrics

Features:
- View-specific data storage and management
- State tracking and initialization monitoring
- Signal-based communication for view changes
- Default data structures for each view mode

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\__init__.py ─────
UI package for Qt6 components, panels, and styling.

This package provides the complete user interface layer including:
- Main application window and navigation
- Reusable UI components (file selectors, inputs, viewers)
- Specialized panels for filtering, alignment, and scoring
- Consistent styling and theming across all components

The UI follows the Model-View-Controller pattern with Qt signals/slots
for communication between components and the underlying services.

Architecture:
    components/: Reusable UI widgets and controls
    panels/: Specialized functional panels for different modes
    styles/: Consistent theming and visual styling
    MainWindow: Top-level application window and layout coordinator

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\__main__.py ─────
Entry point for running the main window as a module.

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\components\alignment_image_viewer.py ─────
Alignment Image Viewer - Enhanced Image Viewer with 3-Point Selection

This component provides an enhanced image viewer specifically designed for
hybrid alignment with 3-point selection capabilities.

Main Class:
- AlignmentImageViewer: Enhanced image viewer with point selection

Key Methods:
- enable_selection_mode(): Enables/disables point selection mode
- add_point(): Adds point at specified image coordinates
- remove_point(): Removes point by index
- move_point(): Moves point to new coordinates
- clear_points(): Clears all selected points
- get_selected_points(): Returns list of selected points
- set_image(): Sets main image to display
- set_overlay_image(): Sets overlay image

Signals Emitted:
- point_added(int, float, float): Point added at coordinates
- point_removed(int): Point removed by index
- point_moved(int, float, float): Point moved to new coordinates
- points_cleared(): All points cleared
- selection_mode_changed(bool): Selection mode enabled/disabled
- point_count_changed(int): Point count changed
- view_changed(dict): View parameters changed

Dependencies:
- Uses: numpy (image processing)
- Uses: PySide6.QtWidgets, PySide6.QtCore, PySide6.QtGui (Qt framework)
- Uses: cv2 (image operations)
- Called by: UI alignment components
- Coordinates with: Alignment workflow components

Features:
- Point selection mode for both GDS and SEM images
- Visual markers for selected points with color coding
- User adjustment of point positions via drag and drop
- Validation of exactly 3 points on both images
- Clear visual feedback about point correspondences
- Enable/disable alignment calculation based on completion
- Zoom and pan capabilities with mouse wheel and drag
- Overlay support with transparency control

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\components\dynamic_parameter_widgets.py ─────
Dynamic Parameter Input Components - Advanced Parameter Input Widgets

This module provides advanced parameter input widgets with up/down buttons,
validation, and real-time updates for filter parameter management.

Main Classes:
- ParameterInputWidget: Base class for parameter input widgets
- NumericParameterWidget: Widget for numeric parameters (int/float)
- BooleanParameterWidget: Widget for boolean parameters
- ChoiceParameterWidget: Widget for parameters with predefined choices
- TupleParameterWidget: Widget for tuple parameters
- DynamicParameterPanel: Panel for dynamic parameter generation

Key Methods:
- setup_ui(): Sets up UI for parameter widget
- get_value(): Gets current parameter value
- set_value(): Sets parameter value
- reset_to_default(): Resets parameter to default value
- set_filter_parameters(): Sets parameters for selected filter
- get_current_parameters(): Gets current parameter values

Signals Emitted:
- value_changed(str, object): Parameter value changed
- value_preview(str, object): Parameter value preview for real-time updates
- parameters_changed(dict): All parameters changed
- parameters_preview(dict): All parameters preview

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore, PySide6.QtGui (Qt framework)
- Uses: services/filters/filter_parameter_parser.FilterParameter
- Called by: UI filtering components
- Coordinates with: Filter parameter management system

Features:
- Advanced parameter input widgets with validation
- Up/down buttons for enhanced control
- Real-time preview updates with timer delays
- Dynamic parameter generation based on filter definitions
- Support for multiple parameter types (numeric, boolean, choice, tuple)
- Dark theme styling for consistent UI appearance
- Parameter reset and default value management

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\components\file_selector.py ─────
File Selector - Enhanced File Selection Component

This module provides an enhanced file selector component for SEM/GDS file selection,
prioritizing .tif files, providing simple file listing, and displaying file information.

Main Class:
- FileSelector: Enhanced widget for selecting SEM and GDS files

Key Methods:
- update_sem_files(): Updates list of available SEM files
- update_gds_files(): Updates list of available GDS files
- populate_structure_dropdown(): Populates structure selection dropdown
- scan_directories(): Scans directories for files
- refresh_files(): Refreshes file listings
- get_selected_sem_file(): Gets currently selected SEM file
- get_selected_gds_file(): Gets default GDS file path
- get_selected_structure_id(): Gets currently selected structure ID

Signals Emitted:
- sem_file_selected(str): SEM file selected
- gds_file_loaded(str): GDS file loaded
- gds_structure_selected(str, int): Structure selected with path and ID
- refresh_requested(): Refresh requested
- file_info_requested(str): File info requested

Dependencies:
- Uses: pathlib.Path, datetime (file operations)
- Uses: PySide6.QtWidgets, PySide6.QtCore, PySide6.QtGui (Qt framework)
- Uses: core/gds_display_generator.get_all_structures_info
- Called by: UI main window and file management components
- Coordinates with: File loading and structure selection workflows

Features:
- Enhanced file selection with priority for .tif files
- Auto-loading of default GDS file (Institute_Project_GDS1.gds)
- Structure selection dropdown with predefined structures
- File information display with metadata
- Directory scanning with extension filtering
- Status updates and progress indication
- Error handling for missing files and directories

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\components\histogram_view.py ─────
Histogram View Component - Matplotlib Embedded Histogram Display

This module provides a matplotlib embedded histogram view component
for image analysis and filter visualization.

Main Class:
- HistogramView: Widget for displaying image histograms

Key Methods:
- setup_ui(): Initializes UI components
- update_histogram(): Updates histogram display with new image data
- clear_displays(): Clears histogram display
- save_plots(): Saves current histogram plot to file
- get_histogram_data(): Gets current histogram data

Signals Emitted:
- histogram_updated(): Histogram display updated

Dependencies:
- Uses: numpy (numerical operations)
- Uses: matplotlib.pyplot, matplotlib.backends.backend_qt5agg (plotting)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Called by: UI main window and filtering components
- Coordinates with: Image processing and analysis workflows

Features:
- Matplotlib embedded histogram display
- Dark theme styling to match application
- Automatic grayscale conversion for color images
- Responsive sizing with proper layout management
- Histogram data export capabilities
- Real-time updates during image processing
- Grid and axis styling for better visualization

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\components\image_viewer.py ─────
Image Viewer - Main Image Display Component

This module provides the main image viewer component for displaying SEM images,
GDS overlays, and handling user interactions including zoom, pan, and point selection.

Main Class:
- ImageViewer: Main image display widget with overlay support

Key Methods:
- set_sem_image(): Sets SEM image for display
- load_image(): Loads image from file path
- set_gds_overlay(): Sets GDS overlay image
- set_alignment_result(): Sets alignment result data
- set_preview_image(): Sets preview image for filtering
- toggle_overlay(): Toggles overlay visibility
- set_overlay_visible(): Sets overlay visibility state
- reset_view(): Resets view to default zoom and pan
- fit_to_window(): Fits image to window size
- export_current_view(): Exports current view as image

Signals Emitted:
- view_changed(dict): View parameters changed
- point_selected(int, int, str): Point selected with coordinates and type

Dependencies:
- Uses: numpy (image processing)
- Uses: PySide6.QtWidgets, PySide6.QtCore, PySide6.QtGui (Qt framework)
- Uses: cv2 (image operations)
- Called by: UI main window and image processing components
- Coordinates with: Alignment and filtering workflows

Features:
- SEM image display with automatic cropping to 1024x666
- GDS overlay support with transparency control
- Zoom and pan capabilities with mouse wheel and drag
- Point selection mode for hybrid alignment
- Visual markers for selected points
- Alignment result visualization
- Preview image support for filtering
- View state management and export capabilities
- Coordinate conversion between image and screen space

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\components\slider_input.py ─────
Slider Input Component - Enhanced Slider with Numeric Input and Increment Buttons

This module provides a slider input component with numeric input and increment/decrement
buttons for precise value control.

Main Class:
- SliderInput: Widget combining slider with numeric input and buttons

Key Methods:
- set_value(): Sets widget value
- get_value(): Gets current widget value
- set_range(): Sets value range
- set_enabled(): Enables/disables widget
- reset_to_default(): Resets to default value

Signals Emitted:
- value_changed(float): Value changed

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Called by: UI parameter input components
- Coordinates with: Parameter adjustment workflows

Features:
- Combined slider and numeric input
- Increment/decrement buttons (±1, ±10)
- Support for integer and float values
- Real-time value synchronization
- Range validation and clamping
- Customizable step size and decimals

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\components\three_point_selection_controller.py ─────
3-Point Selection Controller - Hybrid Alignment Point Management

This component coordinates 3-point selection between SEM and GDS viewers for hybrid
alignment workflow, providing point correspondence validation and alignment calculation.

Main Class:
- ThreePointSelectionController: Controller for managing 3-point selection workflow

Key Methods:
- update_sem_points(): Updates SEM points list and refreshes display
- update_gds_points(): Updates GDS points list and refreshes display
- add_sem_point(): Adds or updates a SEM point
- add_gds_point(): Adds or updates a GDS point
- remove_sem_point(): Removes a SEM point
- remove_gds_point(): Removes a GDS point
- clear_sem_points(): Clears all SEM points
- clear_gds_points(): Clears all GDS points
- get_sem_points(): Gets current SEM points
- get_gds_points(): Gets current GDS points
- is_alignment_ready(): Checks if alignment calculation is ready
- get_point_pairs(): Gets point pairs for alignment calculation

Signals Emitted:
- alignment_ready(bool): True when 3 points on both images
- point_correspondence_changed(list, list): SEM points, GDS points
- calculate_alignment_requested(): User requested alignment calculation
- clear_all_points_requested(): User requested to clear all points
- point_validation_status(str, bool): Status message, is_valid

Dependencies:
- Uses: logging (error tracking)
- Uses: typing (type hints)
- Uses: PySide6.QtWidgets (UI components)
- Uses: PySide6.QtCore (Qt framework)
- Uses: PySide6.QtGui (styling)
- Called by: UI alignment components
- Coordinates with: Image viewers and alignment workflow

Features:
- 3-point selection between SEM and GDS viewers
- Point correspondence validation (exactly 3 points each)
- Visual feedback with progress indicators
- Point correspondence table display
- Alignment calculation enablement based on completion
- Status management and user instructions
- Error handling and validation

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\components\transformation_preview_widget.py ─────
Transformation Preview Widget - Affine Transformation Calculation and Preview

This component provides affine transformation calculation from 3-point pairs with
preview and confirmation capabilities for alignment workflow.

Main Class:
- TransformationPreviewWidget: Widget for previewing and confirming transformations

Key Methods:
- set_point_pairs(): Sets SEM and GDS point pairs for calculation
- set_images_for_preview(): Sets images for transformation preview
- _calculate_transformation(): Calculates affine transformation from points
- _generate_preview(): Generates transformation preview image
- _validate_transformation(): Validates transformation parameters
- _confirm_transformation(): Confirms and emits transformation
- _reject_transformation(): Rejects transformation
- _reset_transformation(): Resets all transformation data

Signals Emitted:
- transformation_calculated(dict): Transformation parameters calculated
- transformation_confirmed(dict): Confirmed transformation
- transformation_rejected(str): Rejection reason
- preview_updated(np.ndarray): Preview image updated
- validation_status_changed(bool, str): Validation status and message
- parameter_adjusted(str, float): Parameter manually adjusted

Dependencies:
- Uses: logging, numpy (calculations and logging)
- Uses: typing (type hints)
- Uses: PySide6.QtWidgets, PySide6.QtCore, PySide6.QtGui (Qt framework)
- Uses: cv2 (image transformations)
- Called by: UI alignment components
- Coordinates with: 3-point selection and alignment workflow

Features:
- Affine transformation calculation from 3-point pairs
- Translation, rotation (90-degree increments), and scaling calculation
- Validation for extreme distortions and invalid transformations
- Real-time transformation preview with overlay visualization
- Manual parameter adjustment with fine-tuning controls
- Comprehensive validation with detailed feedback
- Quality metrics and assessment scoring
- User confirmation or rejection workflow

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\components\workflow_controller.py ─────
Workflow Controller - Processing Workflow Management and Navigation

This component provides visual step indicators, navigation controls, and workflow
state management for processing pipeline coordination.

Main Classes:
- WorkflowStep: Enumeration of workflow steps
- StepStatus: Enumeration of step statuses
- DraggableStepWidget: Draggable widget for workflow steps
- WorkflowController: Main workflow control widget

Key Methods:
- set_step_status(): Sets status of workflow step
- get_current_mode(): Gets current workflow mode
- get_current_step(): Gets current active step
- is_workflow_running(): Checks if workflow is running
- start_manual_pipeline_step(): Starts specific manual pipeline step
- start_automatic_pipeline(): Starts complete automatic pipeline
- reset_active_pipeline(): Resets currently active pipeline
- validate_pipeline_selection(): Validates pipeline selection

Signals Emitted:
- step_requested(str): Step navigation requested
- step_jump_requested(str, bool): Step jump with force flag
- workflow_mode_changed(str): Workflow mode changed
- workflow_reset_requested(): Workflow reset requested
- step_status_updated(str, str): Step status updated
- workflow_progress_changed(int): Overall progress changed
- workflow_order_changed(list): Step order changed

Dependencies:
- Uses: logging, enum (workflow management)
- Uses: typing (type hints)
- Uses: PySide6.QtWidgets, PySide6.QtCore, PySide6.QtGui (Qt framework)
- Uses: core/pipeline/pipeline_selector.PipelineSelector (pipeline management)
- Called by: UI main window
- Coordinates with: Processing pipelines and workflow components

Features:
- Visual step indicators with progress tracking
- Step navigation with validation and jump controls
- Mode switching between manual and automatic workflows
- Drag-and-drop step reordering capabilities
- Enhanced step descriptions and validation feedback
- Separate pipeline management (manual vs automatic)
- Workflow state persistence and recovery
- Context menus and detailed step information

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\components\__init__.py ─────
UI components package.

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\managers\alignment_operations_manager.py ─────
Alignment Operations Manager - Comprehensive Alignment Operations Handler

This module handles all alignment operations, transformations, and alignment-related
functionality, providing a centralized interface for alignment workflows.

Main Class:
- AlignmentOperationsManager: Manages all alignment operations

Key Methods:
- reset_alignment(): Resets alignment using panel system
- auto_align(): Performs automatic alignment between SEM and GDS
- manual_align_3_point(): Performs manual 3-point alignment
- apply_transformation(): Applies custom transformation matrix
- apply_manual_transformation(): Applies manual transformation from parameters
- generate_aligned_gds(): Generates aligned GDS file
- get_alignment_info(): Gets current alignment information
- is_aligned(): Checks if alignment has been performed
- export_alignment_result(): Exports alignment result to file

Signals Emitted:
- alignment_completed(dict): Alignment result completed
- alignment_reset(): Alignment reset
- auto_alignment_finished(dict): Auto alignment search result
- alignment_error(str, str): Operation and error message

Dependencies:
- Uses: cv2, numpy (image processing and transformations)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: skimage.metrics (SSIM, MSE calculations)
- Uses: services/simple_alignment_service.AlignmentService
- Uses: ui/view_manager.ViewMode
- Called by: UI main window
- Coordinates with: Image viewers, GDS operations, and scoring

Features:
- Automatic alignment with batch search capabilities
- Manual 3-point alignment with affine transformation
- Real-time transformation preview and application
- Alignment scoring and quality assessment
- GDS file generation with applied transformations
- Comprehensive error handling and validation
- Integration with panel management system
- Export capabilities for alignment results

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\managers\file_operations_manager.py ─────
File Operations Manager - Comprehensive File Handling Operations

This module handles all file operations including loading SEM images, GDS files,
and saving results, providing centralized file management capabilities.

Main Class:
- FileOperationsManager: Manages all file operations

Key Methods:
- load_sem_image(): Loads SEM image with cropping and saving
- load_sem_image_from_path(): Loads SEM from specified path
- save_results(): Saves current results to file
- export_alignment_data(): Exports alignment data to file
- export_scoring_results(): Exports scoring results to file
- save_filtered_image(): Saves filtered image array
- get_recent_files(): Gets list of recently used files
- get_file_info(): Gets information about a file
- cleanup_temp_files(): Cleans up temporary files

Signals Emitted:
- sem_image_loaded(str, object): SEM image loaded with path and data
- gds_file_loaded(str): GDS file loaded with path
- results_saved(str, str): Results saved with path and type
- file_operation_error(str, str): File operation error with details

Dependencies:
- Uses: os, cv2, numpy, pathlib.Path (file and image operations)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: PIL.Image (image format handling)
- Uses: services/simple_file_service.FileService
- Called by: UI main window and file management components
- Coordinates with: Image processing and alignment workflows

Features:
- SEM image loading with automatic cropping to 1024x666
- Automatic saving of cropped images to Results/cut folder
- Composite image creation with SEM and GDS overlay
- Export capabilities for alignment and scoring data
- File validation and error handling
- Recent files tracking and file information retrieval
- Temporary file cleanup and management

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\managers\gds_operations_manager.py ─────
GDS Operations Manager - Comprehensive GDS File and Structure Management

This module handles all GDS file operations, structure loading, and GDS-related
functionality, providing centralized GDS management capabilities.

Main Class:
- GDSOperationsManager: Manages all GDS operations

Key Methods:
- populate_structure_combo(): Populates structure selection combo
- load_gds_file(): Loads GDS file with dialog selection
- load_gds_file_from_path(): Loads GDS from specified path
- on_structure_selected(): Handles structure selection from combo
- select_structure_by_id(): Selects structure by ID
- get_current_structure_info(): Gets current structure information
- is_gds_loaded(): Checks if GDS file is loaded
- is_structure_selected(): Checks if structure is selected
- reset_structure_selection(): Resets structure selection
- export_structure_overlay(): Exports structure overlay to file

Signals Emitted:
- gds_file_loaded(str): GDS file loaded with path
- structure_selected(str, object): Structure selected with name and overlay
- structure_combo_populated(int): Structure combo populated with count
- gds_operation_error(str, str): GDS operation error with details

Dependencies:
- Uses: numpy, pathlib.Path (data processing and file operations)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: services/new_gds_service.NewGDSService
- Uses: ui/view_manager.ViewMode
- Called by: UI main window and file management components
- Coordinates with: Image viewers and alignment workflows

Features:
- Auto-loading of default GDS file (Institute_Project_GDS1.gds)
- Structure selection with predefined structures (1-5)
- Binary image generation from GDS structures
- Overlay creation and display management
- Structure information retrieval and validation
- Error handling and recovery mechanisms
- Integration with FileSelector component

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\managers\image_processing_manager.py ─────
Image Processing Manager - Comprehensive Image Processing Operations

This module handles all image processing operations, filtering, and image-related
functionality, providing centralized image processing capabilities.

Main Class:
- ImageProcessingManager: Manages all image processing operations

Key Methods:
- set_image(): Sets original image for processing
- on_filter_applied(): Handles filter application from panels
- on_filter_preview(): Handles filter preview generation
- on_reset_filters(): Resets all filters to original image
- apply_custom_filter(): Applies custom filter function
- get_applied_filters(): Gets list of applied filters
- get_image_statistics(): Gets statistics about current image
- export_filtered_image(): Exports filtered image to file
- create_filter_chain(): Applies chain of filters in sequence
- undo_last_filter(): Undoes last applied filter
- save_current_image(): Saves current filtered image

Signals Emitted:
- filter_applied(str, dict): Filter applied with name and parameters
- filter_previewed(str, dict, object): Filter previewed with details
- filters_reset(): All filters reset to original
- image_processing_error(str, str): Processing error with details

Dependencies:
- Uses: cv2, numpy (image processing operations)
- Uses: typing (type hints)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: services/simple_image_processing_service.ImageProcessingService
- Called by: UI main window and filtering components
- Coordinates with: Image viewers and histogram displays

Features:
- Comprehensive filter application and preview system
- Filter history tracking and undo capabilities
- Custom filter function support
- Image statistics calculation and export
- Filter chain creation and management
- Real-time histogram updates
- Integration with alignment display updates
- Error handling and validation

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\managers\scoring_operations_manager.py ─────
Scoring Operations Manager - Comprehensive Scoring and Metrics Calculation

This module handles all scoring operations, metrics calculation, and scoring-related
functionality, providing centralized scoring management capabilities.

Main Class:
- ScoringOperationsManager: Manages all scoring operations

Key Methods:
- calculate_scores(): Calculates alignment scores using multiple metrics
- set_scoring_method(): Sets current scoring method
- get_scoring_results(): Gets current scoring results
- has_scores(): Checks if scoring results are available
- export_scores(): Exports scoring results to file
- compare_methods(): Compares all scoring methods
- clear_scores(): Clears current scoring results

Private Methods:
- _calculate_all_metrics(): Calculates all scoring metrics
- _normalize_arrays(): Normalizes arrays for comparison
- _calculate_edge_overlap(): Calculates edge overlap ratio
- _calculate_cross_correlation(): Calculates cross-correlation
- _calculate_mutual_information(): Calculates mutual information

Signals Emitted:
- scores_calculated(dict): Scores calculated with results
- scoring_completed(str): Scoring completed with method
- scoring_error(str, str): Scoring error with details

Dependencies:
- Uses: cv2, numpy (image processing and calculations)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: skimage.metrics (SSIM, MSE calculations)
- Uses: ui/view_manager.ViewMode
- Called by: UI main window and scoring components
- Coordinates with: Alignment operations and image viewers

Features:
- Multiple scoring metrics (SSIM, MSE, Edge Overlap, Cross-Correlation, Mutual Information)
- Array normalization and preprocessing
- Comprehensive error handling and validation
- Export capabilities with detailed information
- Method comparison and analysis
- Integration with alignment workflow

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\advanced_filtering_panels.py ─────
Advanced Filtering Panels - Comprehensive Image Filtering Interface

This module provides advanced filtering panels with unified layout and comprehensive
filter management capabilities for image processing operations.

Main Classes:
- FilterParameter: Data class for filter parameter definition
- FilterConfig: Data class for filter configuration
- AdvancedFilterConfigManager: Manages filter configurations
- SimpleParameterWidget: Widget for individual parameter control
- UnifiedActionPanel: Unified action buttons panel
- AdvancedFilteringLeftPanel: Main left panel for filter controls
- AdvancedFilteringRightPanel: Right panel for statistics and status

Key Methods:
- _load_working_filters(): Loads all available filter configurations
- _on_filter_selected(): Handles filter selection from dropdown
- _preview_filter(): Generates filter preview
- _apply_filter(): Applies selected filter
- _reset_filters(): Resets all applied filters
- _save_image(): Saves current filtered image
- update_histogram(): Updates histogram display

Signals Emitted:
- filter_applied(str, dict): Filter applied with name and parameters
- filter_previewed(str, dict): Filter previewed with parameters
- filter_reset(): All filters reset
- save_image_requested(): Image save requested

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore, PySide6.QtGui (Qt framework)
- Uses: numpy, cv2 (image processing)
- Uses: json, logging, os (utilities)
- Uses: typing, dataclasses (type definitions)
- Uses: ui/view_manager.ViewMode, ui/components/histogram_view.HistogramView
- Called by: UI main window and filtering workflow
- Coordinates with: Image processing services and histogram displays

Features:
- Comprehensive filter library (CLAHE, Canny, DoG, Threshold, etc.)
- Unified action panel with preview, apply, reset, and save
- Parameter validation and real-time adjustment
- Filter history tracking and export capabilities
- Tabbed interface for controls and history management
- Dark theme styling with consistent UI design
- Error handling and validation feedback

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\alignment_canvas.py ─────
Alignment Canvas Panel - Graphics View for Image Alignment Visualization

This module provides a graphics view canvas for displaying and aligning SEM and GDS
images with enhanced visualization and transformation capabilities.

Main Classes:
- AlignmentCanvas: QGraphicsView for image display and alignment
- AlignmentCanvasPanel: Panel wrapper for alignment canvas

Key Methods:
- display_sem_image(): Displays SEM image with scaling
- display_gds_overlay(): Displays GDS overlay with transparency
- scale_for_display(): Scales images to standard dimensions
- update_gds_transform(): Updates GDS overlay transformation
- fit_in_view(): Fits content in view with aspect ratio
- zoom_in()/zoom_out(): Zoom controls
- clear_images(): Clears all displayed images

Signals Emitted:
- mouse_clicked(float, float): Canvas clicked coordinates
- zoom_requested(float): Zoom level change requested
- transform_changed(dict): Transformation parameters changed

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore, PySide6.QtGui (Qt framework)
- Uses: numpy (array processing)
- Uses: typing (type hints)
- Called by: UI alignment components
- Coordinates with: Image viewers and alignment workflow

Features:
- Standard SEM dimensions (1024x666) optimization
- Real-time GDS overlay transformation (translate, rotate, scale)
- Transparency control for overlay visualization
- Mouse interaction for point selection and navigation
- Zoom and pan capabilities with proper aspect ratio
- Colored overlay rendering for structure visualization
- Transform validation and error handling

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\alignment_controls.py ─────
Alignment Controls Panel - Manual Transformation Controls

This module provides manual alignment controls for translate, rotate, scale, and
transparency adjustments with real-time parameter updates.

Main Class:
- AlignmentControlsPanel: Panel with manual alignment controls

Key Methods:
- setup_ui(): Initializes UI components and layout
- set_transform(): Sets current transform values
- reset_transforms(): Resets all transforms to defaults
- get_current_transform(): Gets current transform parameters

Private Methods:
- _on_translate_x_changed(): Handles X translation changes
- _on_translate_y_changed(): Handles Y translation changes
- _on_rotation_changed(): Handles rotation changes
- _on_scale_changed(): Handles scale changes
- _on_transparency_changed(): Handles transparency changes
- _on_reset_clicked(): Handles reset button click

Signals Emitted:
- transform_changed(dict): Transform parameters changed
- reset_transform(): Reset button clicked

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: typing (type hints)
- Called by: UI alignment components
- Coordinates with: Alignment canvas and transformation workflow

Features:
- Translation controls (X/Y with spinboxes)
- Rotation control with degree precision
- Scale control with decimal precision
- Transparency slider for overlay visibility
- Real-time parameter updates and validation
- Reset functionality for all parameters
- Consistent UI styling and layout

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\alignment_info.py ─────
Alignment Info Panel - Transform Parameters and Status Display

This module provides an information panel for displaying current alignment
transformation parameters and status information.

Main Class:
- AlignmentInfoPanel: Panel for displaying alignment information

Key Methods:
- setup_ui(): Initializes UI components and layout
- update_transform_info(): Updates transform parameter display
- update_status(): Updates alignment status with color coding
- update_image_info(): Updates image loading status
- update_metrics(): Updates alignment quality metrics

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: typing (type hints)
- Called by: UI alignment components
- Coordinates with: Alignment workflow and status management

Features:
- Real-time transform parameter display (translation, rotation, scale, transparency)
- Color-coded status indicators for alignment state
- Image loading status tracking (SEM/GDS)
- Alignment quality metrics display (correlation, overlap)
- Organized layout with grouped information sections
- Visual separators and consistent styling

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\alignment_left_panel.py ─────
Alignment Left Panel - Comprehensive Alignment Control Interface

This module provides a comprehensive alignment control panel with manual and 3-point
alignment modes, featuring extensive error handling and validation.

Main Classes:
- ManualAlignmentTab: Manual alignment controls with transform parameters
- ThreePointAlignmentTab: 3-point alignment with point selection interface
- AlignmentLeftPanel: Main panel with tabbed alignment modes

Key Methods (ManualAlignmentTab):
- setup_ui(): Creates manual alignment interface
- _create_move_section(): Creates translation controls
- _create_rotation_section(): Creates rotation controls
- _create_zoom_section(): Creates zoom/scale controls
- _create_transparency_section(): Creates transparency controls
- adjust_value_safe(): Safely adjusts parameter values
- set_parameters(): Sets alignment parameters with validation
- reset_parameters(): Resets all parameters to defaults
- emit_alignment_changed(): Emits parameter changes with validation

Key Methods (ThreePointAlignmentTab):
- add_point(): Adds point for 3-point alignment
- calculate_transformation(): Calculates affine transformation
- confirm_transformation(): Confirms calculated transformation
- validate_points(): Validates point selection quality
- clear_all_points(): Clears all selected points

Key Methods (AlignmentLeftPanel):
- set_images(): Sets current SEM and GDS images
- set_gds_model(): Sets GDS model for operations
- get_current_alignment_parameters(): Gets active tab parameters
- save_aligned_gds_image(): Saves aligned GDS file
- reset_all_alignments(): Resets all alignment data

Signals Emitted:
- alignment_changed(dict): Alignment parameters changed
- reset_alignment(): Reset alignment requested
- auto_alignment_requested(): Auto alignment requested
- save_aligned_gds_requested(): Save aligned GDS requested
- three_point_alignment_requested(list, list): 3-point alignment with points
- transformation_confirmed(dict): Transformation confirmed
- validation_error(str): Validation error occurred
- parameter_warning(str): Parameter warning issued

Dependencies:
- Uses: logging, traceback, numpy (error handling and data processing)
- Uses: typing (type hints)
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: ui/base_panels.BaseViewPanel, ui/view_manager.ViewMode
- Uses: services and models for GDS operations
- Called by: UI main window and alignment workflow
- Coordinates with: Image viewers, alignment services, and file operations

Features:
- Dual-mode alignment interface (manual and 3-point)
- Comprehensive parameter validation and error handling
- Real-time parameter adjustment with increment/decrement buttons
- 3-point alignment with point validation and transformation calculation
- Dark theme styling with consistent UI design
- Extensive logging and debugging capabilities
- GDS file saving with transformation application
- Parameter rollback and recovery mechanisms

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\alignment_panel.py ─────
Alignment Panel - Comprehensive Alignment Interface with Multi-Mode Support

This module provides a comprehensive alignment panel with manual, hybrid, and automatic
alignment modes, featuring integrated file selection and real-time transformation preview.

Main Classes:
- AlignmentPanel: Main alignment interface with sub-mode switching
- OverlayCanvas: Graphics view for SEM and GDS image overlay display

Key Methods:
- setup_ui(): Initializes 3-panel layout (controls, display, file selection)
- _create_manual_controls(): Creates manual alignment transformation controls
- _create_hybrid_controls(): Creates 3-point alignment interface
- _create_automatic_controls(): Creates automatic alignment interface
- set_initial_sem_image(): Sets SEM image for alignment operations
- set_initial_gds_image(): Sets GDS overlay for alignment operations
- _generate_aligned_gds(): Generates aligned GDS file from transformations
- update_transform(): Updates real-time transformation preview

Signals Emitted:
- transform_changed(dict): Transform parameters changed
- alignment_applied(dict): Alignment transformation applied
- sem_file_selected(str): SEM file selected from FileSelector
- gds_structure_selected(str, int): GDS structure selected
- three_points_selected(list, list): 3-point alignment points selected
- transformation_calculated(dict): Transformation matrix calculated
- transformation_confirmed(dict): Transformation confirmed and applied

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore, PySide6.QtGui (Qt framework)
- Uses: numpy (array processing)
- Uses: typing, logging, os, pathlib (utilities)
- Uses: ui/components (SliderInput, ThreePointSelectionController, etc.)
- Uses: services (GdsTransformationService)
- Called by: UI main window and alignment workflow
- Coordinates with: File operations, image processing, and transformation services

Features:
- Three alignment modes: Manual (sliders), Hybrid (3-point), Automatic
- Integrated FileSelector for consistent file management
- Real-time transformation preview with overlay canvas
- 3-point alignment workflow with point validation
- Automatic GDS file generation with applied transformations
- Sub-mode switching with dedicated control panels
- Interactive image display with zoom and pan capabilities

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\alignment_sub_mode_switcher.py ─────
Alignment Sub-Mode Switcher - Alignment Mode Selection Interface

This module provides a sub-mode switcher for alignment operations, allowing users
to switch between manual, hybrid, and automatic alignment modes within the
alignment panel interface.

Main Class:
- AlignmentSubModeSwitcher: Widget with radio buttons for alignment sub-mode selection

Key Methods:
- _setup_ui(): Initializes UI with radio buttons and status display
- _on_sub_mode_selected(): Handles sub-mode selection from radio buttons
- _update_status(): Updates status label based on current sub-mode
- set_sub_mode(): Programmatically sets current sub-mode
- get_current_sub_mode(): Gets currently selected sub-mode
- set_sub_mode_enabled(): Enables or disables specific sub-modes
- set_sub_mode_tooltip(): Sets tooltip for sub-mode buttons

Signals Emitted:
- sub_mode_changed(str): Sub-mode changed to new mode name

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: typing (type hints)
- Called by: UI alignment panel components
- Coordinates with: Alignment workflow and mode management

Sub-Modes:
- Manual: Manual alignment with transformation controls
- Hybrid: 3-point alignment with manual refinement
- Automatic: Fully automatic alignment using image features

Features:
- Radio button interface for exclusive sub-mode selection
- Visual status indicator with color coding for each mode
- Programmatic sub-mode control and state management
- Tooltip support for sub-mode descriptions
- Enable/disable functionality for individual sub-modes
- Custom styling with hover effects and visual feedback

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\automatic_filter_panel.py ─────
Automatic Filter Panel - Categorized Automatic Filtering Interface

This module provides an automatic filtering panel with categorized filter selection
for contrast enhancement, denoising, binarisation, and edge detection operations.

Main Class:
- AutomaticFilterPanel: Panel for automatic filtering with categorized filter selection

Key Methods:
- setup_ui(): Initializes UI with filter categories and control buttons
- _setup_contrast_section(): Creates contrast enhancement filter options
- _setup_denoising_section(): Creates noise reduction filter options
- _setup_binarisation_section(): Creates binarisation filter options
- _setup_edge_detection_section(): Creates edge detection filter options
- _setup_control_buttons(): Creates action buttons for filter execution
- _setup_progress_section(): Creates progress tracking interface
- _on_contrast_changed(): Handles contrast filter selection changes
- _on_denoising_changed(): Handles denoising filter selection changes
- _on_binarisation_changed(): Handles binarisation filter selection changes
- _on_edge_detection_changed(): Handles edge detection filter selection changes
- _on_run_automatic_filtering(): Handles automatic filtering execution
- _on_reset_selections(): Resets all filter selections
- get_selected_filters(): Returns currently selected filters

Signals Emitted:
- automatic_filtering_requested(dict): Automatic filtering requested with selections

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: typing (type hints for Dict, Any, List)
- Called by: UI filtering components and workflow
- Coordinates with: Image processing services and filter operations

Filter Categories:
- Contrast Enhancement: CLAHE with various intensity levels
- Noise Reduction: Non-Local Means and Total Variation denoising
- Binarisation: Automatic and manual threshold methods
- Edge Detection: Canny and Laplacian edge detection

Features:
- Categorized filter selection with dropdown menus
- Pre-configured filter parameters for different intensity levels
- Progress tracking and status display
- Reset functionality for clearing selections
- Dark theme styling with consistent UI design
- Placeholder functionality for future automatic processing
- Multi-category filter combination support

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\filter_panel.py ─────
Filter Panel - Comprehensive Image Processing and Filtering Interface

This module provides a comprehensive filtering panel with dynamic filter loading,
parameter controls, histogram visualization, and preset management.

Main Class:
- FilterPanel: Main filtering interface with controls and visualization

Key Methods:
- setup_ui(): Initializes UI with filter controls and histogram display
- set_available_filters(): Sets list of available filters
- _on_filter_changed(): Handles filter selection changes
- _update_parameter_controls(): Updates parameter controls for selected filter
- _on_apply_clicked(): Applies selected filter with current parameters
- _on_preview_clicked(): Generates filter preview
- _on_reset_clicked(): Resets all filters to original image
- update_histogram(): Updates histogram display with image data
- _load_dynamic_filters(): Loads filters from configuration files
- _on_save_clicked(): Saves current filtered image

Signals Emitted:
- filter_applied(str, dict): Filter applied with name and parameters
- filter_previewed(str, dict): Filter previewed with parameters
- filter_reset(): All filters reset to original
- preset_saved(str, dict): Filter preset saved
- preset_loaded(str, dict): Filter preset loaded
- save_image_requested(): Image save requested

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: numpy (array processing)
- Uses: json, os, logging (utilities)
- Uses: typing (type hints)
- Uses: ui/components (HistogramView, DynamicParameterPanel)
- Called by: UI main window and filtering workflow
- Coordinates with: Image processing services and histogram displays

Features:
- Dynamic filter loading from configuration files
- Real-time parameter adjustment with preview capability
- Filter history tracking and management
- Preset system for saving and loading filter configurations
- Integrated histogram display for image analysis
- Progress tracking and status updates
- Export capabilities for filtered images

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\mode_switcher.py ─────
Mode Switcher - Application Mode Selection Interface

This module provides a mode switching interface with radio buttons for selecting
between different operational modes of the image analysis application.

Main Class:
- ModeSwitcher: Top bar widget with radio buttons for mode switching

Key Methods:
- _setup_ui(): Initializes UI with radio buttons and status display
- _on_mode_selected(): Handles mode selection from radio buttons
- _update_status(): Updates status label based on current mode
- set_mode(): Programmatically sets current mode
- get_current_mode(): Gets currently selected mode
- set_mode_enabled(): Enables or disables specific modes
- set_mode_tooltip(): Sets tooltip for mode buttons

Signals Emitted:
- mode_changed(str): Mode changed to new mode name

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: typing (type hints)
- Called by: UI main window
- Coordinates with: View management and application workflow

Modes:
- Manual: Manual alignment operations
- Auto: Automatic alignment operations
- Score: Scoring and analysis operations

Features:
- Radio button interface for exclusive mode selection
- Visual status indicator with color coding
- Programmatic mode control and state management
- Tooltip support for mode descriptions
- Enable/disable functionality for individual modes

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\score_panel.py ─────
Score Panel - Comprehensive Scoring and Analysis Interface

This module provides a comprehensive scoring panel with multiple metrics, overlay
visualization, results display, and export functionality for image comparison.

Main Class:
- ScorePanel: Main scoring interface with metric selection and results display

Key Methods:
- setup_ui(): Initializes UI with metric selection and results display
- _on_calculate_clicked(): Handles score calculation requests
- _on_metric_changed(): Handles metric selection changes
- _get_selected_metric(): Gets currently selected scoring metric
- _on_generate_overlay_clicked(): Generates color-coded difference overlay
- _create_difference_overlay(): Creates overlay from SEM and GDS comparison
- update_scores(): Updates score display with calculated results
- update_chart_display(): Updates text-based chart visualization
- on_score_completed(): Handles score calculation completion

Signals Emitted:
- score_calculated(str, dict): Score calculation requested
- overlay_generated(np.ndarray): Overlay image generated
- export_requested(str, dict): Export operation requested

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: numpy (array processing)
- Uses: typing, logging (utilities)
- Called by: UI main window and scoring workflow
- Coordinates with: Image comparison and analysis services

Metrics:
- Pixel Match: Direct pixel-to-pixel comparison
- SSIM: Structural Similarity Index Measure
- IoU: Intersection over Union
- Cross Correlation: Normalized cross-correlation
- MSE: Mean Squared Error

Features:
- Multiple scoring metrics with radio button selection
- Color-coded difference overlay generation
- Score results table with detailed interpretations
- Text-based chart visualization
- Export functionality (JSON, CSV, overlay images)
- Progress tracking and status updates
- Session state management and restoration

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\scoring_left_panel.py ─────
Scoring Left Panel Module

This module provides a comprehensive user interface for alignment scoring operations in a GDS/SEM 
image alignment application. It implements a tabbed interface with scoring method selection, 
parameter configuration, batch analysis capabilities, and results visualization.

The module handles multiple scoring algorithms including SSIM (Structural Similarity Index),
MSE (Mean Squared Error), Cross-Correlation, Edge Overlap, and Mutual Information methods.
It supports both single alignment scoring and batch parameter sweep analysis.

Dependencies:
    - PySide6.QtWidgets: UI components (QWidget, QVBoxLayout, QHBoxLayout, QTabWidget, 
      QRadioButton, QButtonGroup, QPushButton, QGroupBox, QListWidget, QTableWidget, 
      QTableWidgetItem, QLabel, QCheckBox, QSpinBox, QDoubleSpinBox, QProgressBar, 
      QTextEdit, QComboBox, QSlider)
    - PySide6.QtCore: Core functionality (Qt, Signal)
    - src.ui.base_panels: BaseViewPanel class
    - src.ui.view_manager: ViewMode enumeration

Classes:
    ScoringMethodTab: Tab widget for scoring method selection and single scoring operations
        - setup_ui(): Creates the user interface layout
        - setup_ssim_parameters(): Configures SSIM-specific parameters (data range, window size)
        - setup_edge_parameters(): Configures edge detection parameters (Canny thresholds)
        - clear_parameters(): Removes all parameter widgets from layout
        - connect_signals(): Connects UI signals to handlers
        - on_method_changed(): Handles scoring method selection changes
        - score_current(): Requests scoring with current method and parameters
        - score_all_methods(): Requests batch scoring with selected methods
        - get_current_parameters(): Retrieves current parameter values
        - update_scores(): Updates the scores display table

    BatchScoringTab: Tab widget for batch scoring operations and results analysis
        - setup_ui(): Creates the batch analysis interface
        - connect_signals(): Connects UI signals to handlers
        - start_batch_analysis(): Initiates batch parameter sweep analysis
        - stop_batch_analysis(): Stops running batch analysis
        - update_progress(): Updates progress bar and status
        - add_result(): Adds a result to the results table
        - clear_results(): Clears all batch results

    ScoringLeftPanel: Main panel class inheriting from BaseViewPanel
        - init_panel(): Initializes the complete panel UI with tabs
        - get_current_tab_name(): Returns name of currently active tab
        - switch_to_tab(): Switches to specified tab
        - update_scores(): Updates scoring results display
        - add_batch_result(): Adds batch analysis result to table

Signals:
    - scoring_method_changed: Emitted when scoring method is changed
    - score_requested: Emitted when single scoring is requested
    - batch_score_requested: Emitted when multi-method scoring is requested
    - batch_analysis_started: Emitted when batch analysis begins
    - export_results_requested: Emitted when results export is requested

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\scoring_right_panel.py ─────
Scoring Right Panel - Image Display and Comparison Interface

This module provides the right panel for the scoring view, featuring dual image
displays for GDS and SEM images with comparison tools and visual analysis.

Main Class:
- ScoringRightPanel: Right panel for scoring view with image displays

Key Methods:
- init_panel(): Initializes panel layout with image viewers and controls
- update_gds_image(): Updates GDS image display with new data
- update_sem_image(): Updates SEM image display with new data
- clear_images(): Clears both image displays

Signals Emitted:
- comparison_toggled(bool): Image comparison mode toggled

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Uses: ui/base_panels.BaseViewPanel (base panel functionality)
- Uses: ui/components/image_viewer.ImageViewer (image display)
- Uses: ui/view_manager.ViewMode (view mode management)
- Called by: UI scoring workflow and main window
- Coordinates with: Scoring operations and image analysis

Features:
- Dual image viewer setup for GDS and SEM images
- Grouped image displays with clear labeling
- Toggle comparison mode for side-by-side analysis
- Integrated image viewer controls and functionality
- Consistent styling with application theme
- Signal-based communication for comparison operations

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\scoring_tab_panel.py ─────
Scoring Tab Panel - Unified Scoring Interface for Main Window

This module provides a scoring tab panel for the unified main window interface,
featuring scoring method selection, calculation controls, and results display
for alignment quality assessment.

Main Class:
- ScoringTabPanel: Panel for scoring operations in the main tab widget

Key Methods:
- setup_ui(): Initializes UI with method selection and results display
- setup_styling(): Applies dark theme styling to all components
- _on_method_changed(): Handles scoring method selection changes
- _on_calculate_clicked(): Handles calculate scores button clicks
- display_results(): Displays scoring results in formatted text

Signals Emitted:
- scoring_method_changed(str): Scoring method selection changed
- calculate_scores_requested(str): Score calculation requested for method

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore (Qt framework)
- Called by: Main window tab widget and scoring workflow
- Coordinates with: Scoring services and result processing

Scoring Methods:
- SSIM: Structural Similarity Index Measure
- MSE: Mean Squared Error
- PSNR: Peak Signal-to-Noise Ratio
- Cross-Correlation: Normalized cross-correlation

Features:
- Dropdown method selection with multiple scoring algorithms
- Calculate button for triggering score computation
- Results display with formatted text output
- Dark theme styling consistent with application design
- Read-only results area with monospace font for clarity
- Grouped UI elements with clear visual organization

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\sequential_filtering_panels.py ─────
Sequential Filtering Panels - 4-Stage Image Processing Workflow

This module implements a comprehensive 4-stage sequential image processing workflow
for SEM image enhancement. Each stage builds upon the previous result, providing
a structured approach to image filtering and analysis.

Main Classes:
- SequentialFilterConfigManager: Manages filter configurations for all stages
- StageParameterWidget: Parameter control widget for individual filter parameters
- StageControlPanel: Control panel for each processing stage
- SequentialFilteringLeftPanel: Left panel with stage controls and filter selection
- SequentialFilteringRightPanel: Right panel with progress tracking and statistics

Key Methods (SequentialFilterConfigManager):
- _initialize_stages(): Sets up the 4 processing stages
- _load_sequential_filters(): Loads all filters organized by stage
- get_filters_for_stage(): Gets filters available for a specific stage
- get_stage_config(): Gets configuration for a processing stage

Key Methods (StageControlPanel):
- setup_ui(): Creates stage-specific UI with filter selection and parameters
- _on_filter_selected(): Handles filter selection and parameter setup
- get_current_parameters(): Gets current parameter values for the stage
- reset_stage(): Resets stage to initial state

Key Methods (SequentialFilteringLeftPanel):
- init_panel(): Initializes panel with all 4 stage controls
- _on_stage_preview(): Handles stage preview requests
- _on_stage_apply(): Handles stage application requests
- reset_all_stages(): Resets all stages to initial state

Key Methods (SequentialFilteringRightPanel):
- update_stage_progress(): Updates progress indicators for stages
- update_histogram(): Updates histogram display for current stage
- set_processing_status(): Sets overall processing status message

Signals Emitted:
- stage_preview_requested(int, str, dict): Stage preview with parameters
- stage_apply_requested(int, str, dict): Stage application with parameters
- stage_reset_requested(int): Stage reset requested
- stage_save_requested(int): Stage save requested
- reset_all_requested(): Reset all stages requested

Dependencies:
- Uses: PySide6.QtWidgets, PySide6.QtCore, PySide6.QtGui (Qt framework)
- Uses: numpy, cv2 (image processing)
- Uses: json, logging, os (system operations)
- Uses: typing, dataclasses, enum (type definitions)
- Uses: ui/view_manager.ViewMode, ui/components/histogram_view.HistogramView
- Called by: Main filtering workflow and UI management
- Coordinates with: Image processing services and filter operations

Processing Stages:
1. Contrast Enhancement: CLAHE, gamma correction, histogram equalization
2. Blur & Noise Reduction: Gaussian blur, median filter, bilateral filter, NLM denoising
3. Binarization: Simple threshold, adaptive threshold, Otsu threshold
4. Edge Detection: Canny, Laplacian, Sobel edge detection

Features:
- Sequential 4-stage processing workflow with stage dependencies
- Comprehensive filter library with pre-configured parameters
- Real-time parameter adjustment with immediate feedback
- Progress tracking with visual indicators for each stage
- Histogram analysis and statistics for each processing stage
- Stage-specific controls with preview and apply functionality
- Dark theme styling with color-coded stage indicators
- Parameter validation and error handling
- Save and reset functionality for individual stages
- Scrollable interface for compact display of all stages

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\panels\__init__.py ─────
UI Panels Package - User Interface Panel Components

This package contains all UI panel components for the image analysis application,
providing modular and reusable interface elements.

Main Components:
- ModeSwitcher: Mode switching panel
- AlignmentControlsPanel: Alignment control interface
- AlignmentCanvasPanel: Alignment canvas display
- AlignmentInfoPanel: Alignment information display
- AlignmentPanel: Main alignment panel
- FilterPanel: Image filtering panel
- ScorePanel: Scoring results panel

Dependencies:
- Individual panel modules within this package
- Used by: UI main window and panel management system
- Coordinates with: View management and workflow components

Features:
- Modular panel architecture
- Reusable UI components
- Consistent interface design
- Integration with main application workflow

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\styles\theme.py ─────
UI style definitions and theming for the SEM/GDS alignment application.

This module provides consistent styling across all UI components using
Qt Style Sheets (QSS). The styling includes:
- Color schemes and palettes
- Widget-specific styling rules
- Layout and spacing standards
- Icon and image styling

───── C:\Users\tarik\Desktop\Image_analysis\src\ui\styles\__init__.py ─────
UI styles package for consistent theming.

───── C:\Users\tarik\Desktop\Image_analysis\src\utils\transformations.py ─────
Transformation Utilities - Mathematical Transformation Functions

This module provides comprehensive mathematical transformation functions for
coordinate and matrix operations used throughout the SEM/GDS alignment tool.
It handles 2D transformations including translation, rotation, scaling, and
coordinate system conversions between pixel and GDS units.

Main Functions:
- create_transformation_matrix(): Creates 3x3 homogeneous transformation matrices
- apply_affine_transform(): Applies transformation matrices to point sets
- apply_polygon_transform(): Transforms polygon vertices with specified parameters
- convert_pixels_to_gds_units(): Converts pixel coordinates to GDS units
- convert_gds_to_pixel_units(): Converts GDS coordinates to pixel units
- calculate_frame_bounds(): Calculates new bounds after transformations
- apply_90_rotation_to_bounds(): Applies 90-degree rotations to bounding boxes
- decompose_transformation_matrix(): Extracts transformation components from matrices
- validate_transformation_parameters(): Validates transformation parameter ranges
- create_rotation_matrix_2d(): Creates 2D rotation matrices for OpenCV
- transform_points_with_matrix(): Transforms points using 2x3 or 3x3 matrices
- calculate_zoom_transform_matrix(): Creates zoom transformation matrices
- calculate_movement_transform_matrix(): Creates translation matrices
- combine_transformation_matrices(): Combines multiple transformation matrices
- invert_transformation_matrix(): Inverts transformation matrices
- snap_rotation_to_90_degrees(): Snaps angles to 90-degree increments
- create_composite_transform(): Creates composite transformations for UI operations

Dependencies:
- Uses: numpy (matrix operations), math (trigonometric functions)
- Uses: cv2 (OpenCV for 2D rotation matrices), logging (error reporting)
- Used by: services/transformation_service.py (transformation operations)
- Used by: services/gds_transformation_service.py (GDS coordinate transformations)
- Used by: ui/alignment_canvas.py (canvas transformations)
- Used by: core/models (coordinate system conversions)

Key Features:
- Homogeneous coordinate system support (3x3 matrices)
- Center-based transformations for rotation and scaling
- Coordinate system conversion between pixel and GDS units
- Bounding box calculations with transformation support
- 90-degree rotation snapping for UI convenience
- Matrix composition and decomposition utilities
- Parameter validation with reasonable bounds checking
- Support for both 2x3 and 3x3 transformation matrices

Transformation Order:
1. Translation to origin (if center-based)
2. Scaling around origin
3. Rotation around origin
4. Translation back from origin
5. Final translation offset

Coordinate Systems:
- Pixel coordinates: Origin at top-left, Y increases downward
- GDS coordinates: Origin at bottom-left, Y increases upward
- Automatic Y-axis flipping for coordinate system conversion

───── C:\Users\tarik\Desktop\Image_analysis\src\utils\__init__.py ─────
Utility modules for image analysis operations.

This package contains reusable utility functions and classes
that can be used across different services and models.

